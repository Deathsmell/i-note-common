{"version":3,"sources":["hooks/note.hook.js","hooks/TypeMessage.js","components/Note.jsx","hooks/ws.hook.js","App.js","index.js"],"names":["useNote","updateNote","oldNote","id","width","height","x","y","color","text","type","replace","defaultNote","isEqual","updatedNote","TypeMessage","Note","focus","setFocus","note","noteIndex","notes","setNotes","connection","useState","changed","setChanged","zIndex","setZIndex","setText","useEffect","updateStateNotes","filter","sendNewPosition","send","JSON","stringify","changeColorHandler","e","changeColor","target","value","console","log","className","disableDragging","style","size","minWidth","minHeight","position","onDragStop","event","data","onResizeStop","direction","ref","delta","bounds","backgroundColor","onClick","onMouseLeave","prev","noteFromState","onChange","autoFocus","onBlur","useWS","setConnection","update","useCallback","serverNote","reducer","action","Array","isArray","error","updatePosition","respNote","parse","connected","url","window","location","href","webSocket","WebSocket","onmessage","onopen","App","onDoubleClick","newNote","clientX","clientY","map","index","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.36abed98.chunk.js","sourcesContent":["const useNote = () => {\n\n    const defaultNote = {\n        id: null,\n        text: '',\n        width: 200,\n        height: 200,\n        x: 0,\n        y: 0,\n        type: '',\n        color: '',\n    }\n\n    const updateNote = (oldNote, {id, width, height, x, y, color, text, type}) => {\n        if (typeof width === \"string\") width = width.replace(/px$/, '')\n        if (typeof height === \"string\") height = height.replace(/px$/, '')\n        return {\n            id: id || oldNote.id,\n            width: width || oldNote.width,\n            height: height || oldNote.height,\n            x: ~x ? x : oldNote.x,\n            y: ~y ? y : oldNote.y,\n            color: color || oldNote.color,\n            text: text || oldNote.text || ' ',\n            type: type || null\n        }\n    }\n\n    const isEqual = (oldNote, updatedNote) => {\n        return (oldNote.width === updatedNote.width)\n            && (oldNote.height === updatedNote.height)\n            && (oldNote.x === updatedNote.x)\n            && (oldNote.y === updatedNote.y)\n            && (oldNote.color === updatedNote.color)\n            && (oldNote.text === updatedNote.text)\n    }\n\n    return {updateNote, defaultNote,isEqual}\n}\n\nexport default useNote","export const TypeMessage = {\n    CREATE: 'create',\n    UPDATE: 'update',\n    DELETE: 'delete',\n    INITIAL: 'initial'\n}","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, {useEffect, useState} from \"react\"\nimport {Rnd} from \"react-rnd\"\nimport useNote from \"../hooks/note.hook\";\nimport {TypeMessage} from \"../hooks/TypeMessage\";\nimport ReactMarkdown from 'react-markdown'\n\n\nconst Note = ({focus, setFocus, note, color, noteIndex, notes, setNotes, connection}) => {\n\n    const [changed, setChanged] = useState(false);\n    const [zIndex, setZIndex] = useState(1);\n    const [text, setText] = useState(note.text);\n    const {updateNote, isEqual} = useNote();\n\n    useEffect(function resetZIndex () {\n        setZIndex(0)\n        return () => {\n            setZIndex(0)\n        }\n    }, [])\n\n    useEffect(function liftingComponent (){\n        if (focus){\n            setZIndex(1)\n        } else {\n            setZIndex(0)\n        }\n    },[focus])\n\n    const updateStateNotes = (updatedNote) => {\n        setNotes(() => [...notes.filter(note => note.id !== updatedNote.id), updatedNote])\n    }\n    const sendNewPosition = (type, note) =>\n        connection.send(JSON.stringify({...note, type}))\n\n    const onDragStopHandler = (event, data) => {\n        if (note.x !== data.x && data.y !== note.y) {\n            const updatedNote = updateNote(note, {x: data.x, y: data.y});\n            sendNewPosition(TypeMessage.UPDATE, updatedNote)\n            updateStateNotes(updatedNote)\n        }\n    }\n\n    const onResizeStopHandler = (e, direction, ref, delta, position) => {\n        const updatedNote = updateNote(note, {\n            width: ref.style.width,\n            height: ref.style.height,\n            x: position.x,\n            y: position.y,\n        });\n        if (!isEqual(note, updatedNote)) {\n            updateStateNotes(updatedNote)\n            sendNewPosition(TypeMessage.UPDATE, updatedNote)\n        }\n    }\n\n    const deleteNoteHandler = () => {\n        sendNewPosition(TypeMessage.DELETE, note)\n        setNotes((prev) => [...prev.filter(noteFromState => noteFromState.id !== note.id)])\n    }\n\n    const changeColorHandler = (e) => {\n        const changeColor = e.target.value;\n        if (changeColor !== color) {\n            console.log(\"update color\")\n            const updatedNote = updateNote(note, {color: changeColor});\n            updateStateNotes(updatedNote)\n            sendNewPosition(TypeMessage.UPDATE, updatedNote)\n        }\n    }\n\n    const changeTextHandler = (e) => {\n        const text = e.target.value;\n        setText(text)\n    }\n\n    useEffect(function saveChangeText() {\n        if (!changed) {\n            const updatedNote = updateNote(note, {text});\n            updateStateNotes(updatedNote)\n            sendNewPosition(TypeMessage.UPDATE, updatedNote)\n        }\n    }, [changed])\n\n\n    return (\n        <Rnd\n            className=\"note\"\n            disableDragging={focus}\n            style={{zIndex: zIndex}}\n            size={{width: notes[noteIndex].width, height: notes[noteIndex].height}}\n            minWidth={250}\n            minHeight={250}\n            position={{x: notes[noteIndex].x, y: notes[noteIndex].y}}\n            onDragStop={onDragStopHandler}\n            onResizeStop={onResizeStopHandler}\n            bounds={\"window\"}\n        >\n            <div className=\"note-header\"\n                 style={{backgroundColor: color || \"gold\"}}\n                 onClick={() => setZIndex(1)}\n                 onMouseLeave={() => setZIndex(0)}\n            >\n                <div className=\"color-buttons\">\n                    <button className=\"btn blue\"\n                            value=\"blue\"\n                            onClick={changeColorHandler}\n                    />\n                    <button className=\"btn pink\"\n                            value=\"pink\"\n                            onClick={changeColorHandler}\n                    />\n                    <button className=\"btn yellow\"\n                            value=\"yellow\"\n                            onClick={changeColorHandler}\n                    />\n                </div>\n                <div className=\"cross\"\n                     onClick={deleteNoteHandler}\n                >\n                    &times;\n                </div>\n            </div>\n            {\n                changed\n                    ? (\n                        <textarea\n                            className=\"note-text\"\n                            value={text}\n                            onChange={changeTextHandler}\n                            autoFocus\n                            onBlur={() => {\n                                setChanged(false)\n                                setFocus(false)\n                            }}\n                        />\n\n                    )\n                    : (\n                        <div id=\"preview\"\n                             className=\"note-body\"\n                             onClick={() => {\n                                 setChanged(true)\n                                 setFocus(true)\n                             }}\n                        >\n                            <ReactMarkdown>\n                                {text}\n                            </ReactMarkdown>\n                        </div>\n                    )\n            }\n        </Rnd>\n    )\n}\n\nexport default Note","import {useCallback, useEffect, useState} from \"react\";\nimport {TypeMessage} from \"./TypeMessage\";\n\n\nconst useWS = (notes, setNotes) => {\n\n    const [connection, setConnection] = useState(null);\n\n    const update = useCallback((serverNote) => {\n        setNotes((prev) => [...prev.filter(note => note.id !== serverNote.id), serverNote])\n    }, [ setNotes])\n\n    const reducer = useCallback((note, action) => {\n        switch (action) {\n            case TypeMessage.CREATE:\n                return update(note)\n            case TypeMessage.UPDATE:\n                return update(note)\n            case TypeMessage.DELETE:\n                return setNotes((prev) => [...prev.filter(noteFromState => noteFromState.id !== note.id)])\n            default:\n                if (Array.isArray(note)) {\n                    setNotes(() => note)\n                } else {\n                    console.error('Incorrect data message', action, note)\n                }\n        }\n    }, [setNotes, update])\n\n    const updatePosition = useCallback(({data}) => {\n        if (data) {\n            const respNote = JSON.parse(data);\n            reducer(respNote, respNote.type)\n        }\n    }, [reducer])\n\n    const connected = () => {\n        console.log(\"connected\")\n    }\n\n    useEffect(() => {\n        if (connection === null) {\n            const url = window.location.href\n                .replace(/^http/, 'ws')\n                .replace(/3000\\/$/, '5000/');\n            console.log(url)\n            const webSocket = new WebSocket(url)\n            webSocket.onmessage = updatePosition\n            webSocket.onopen = connected\n            setConnection(webSocket)\n        }\n    }, [connection, updatePosition])\n\n    return {connection}\n}\n\nexport default useWS","import React, {useState} from \"react\"\nimport Note from \"./components/Note\";\nimport useWS from \"./hooks/ws.hook\";\nimport useNote from \"./hooks/note.hook\";\nimport {TypeMessage} from \"./hooks/TypeMessage\";\n\n\nconst App = () => {\n\n    const {defaultNote, updateNote} = useNote();\n    const [notes, setNotes] = useState([]);\n    const [focus, setFocus] = useState(false);\n\n    const {connection} = useWS(notes, setNotes);\n\n    const createHandler = (e) => {\n        if (!focus) {\n            const newNote = updateNote(defaultNote, {x: e.clientX, y: e.clientY, type: TypeMessage.CREATE});\n            connection.send(JSON.stringify(newNote))\n        }\n    }\n\n    return (\n        <div className=\"workspace\"\n             onDoubleClick={createHandler}\n        >\n            {\n                notes &&\n                notes.map((note, index) => {\n                        return (\n                            <Note key={note.id}\n                                  noteIndex={index}\n                                  note={note}\n                                  notes={notes}\n                                  focus={focus}\n                                  setFocus={setFocus}\n                                  setNotes={setNotes}\n                                  connection={connection}\n                                  color={note.color}\n                            />\n                        )\n                    }\n                )\n            }\n        </div>\n    )\n}\n\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport App from './App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}