{"ast":null,"code":"var _jsxFileName = \"/home/deathsmell/WebstormProjects/i-note-common/src/components/Note.jsx\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Rnd } from \"react-rnd\";\nimport useNote from \"../hooks/note.hook\";\nimport { TypeMessage } from \"../hooks/TypeMessage\";\nimport ReactMarkdown from 'react-markdown';\n\nconst Note = ({\n  note,\n  color,\n  noteIndex,\n  notes,\n  setNotes,\n  connection\n}) => {\n  const [isDragging, setIsDragging] = useState(false);\n  const [changed, setChanged] = useState(false);\n  const [zIndex, setZIndex] = useState(1);\n  const [text, setText] = useState(note.text);\n  const {\n    updateNote,\n    isEqual\n  } = useNote();\n  useEffect(() => {\n    return () => {\n      setZIndex(1);\n    };\n  }, []);\n\n  const updateStateNotes = updatedNote => {\n    setNotes(() => [...notes.filter(note => note.id !== updatedNote.id), updatedNote]);\n  };\n\n  const sendNewPosition = (type, note) => connection.send(JSON.stringify({ ...note,\n    type\n  }));\n\n  const onDragStopHandler = (event, data) => {\n    if (note.x !== data.x && data.y !== note.y) {\n      const updatedNote = updateNote(note, {\n        x: data.x,\n        y: data.y\n      });\n      sendNewPosition(TypeMessage.UPDATE, updatedNote);\n      updateStateNotes(updatedNote);\n    }\n  };\n\n  const onResizeStopHandler = (e, direction, ref, delta, position) => {\n    const updatedNote = updateNote(note, {\n      width: ref.style.width,\n      height: ref.style.height,\n      x: position.x,\n      y: position.y\n    });\n\n    if (!isEqual(note, updatedNote)) {\n      updateStateNotes(updatedNote);\n      sendNewPosition(TypeMessage.UPDATE, updatedNote);\n    }\n  };\n\n  const deleteNoteHandler = () => {\n    sendNewPosition(TypeMessage.DELETE, note);\n    setNotes(prev => [...prev.filter(noteFromState => noteFromState.id !== note.id)]);\n  };\n\n  const changeColorHandler = e => {\n    const changeColor = e.target.value;\n\n    if (changeColor !== color) {\n      console.log(\"update color\");\n      const updatedNote = updateNote(note, {\n        color: changeColor\n      });\n      updateStateNotes(updatedNote);\n      sendNewPosition(TypeMessage.UPDATE, updatedNote);\n    }\n  };\n\n  const changeTextHandler = e => {\n    const text = e.target.value;\n    setText(text);\n  };\n\n  useEffect(function saveChangeText() {\n    if (!changed) {\n      const updatedNote = updateNote(note, {\n        text\n      });\n      updateStateNotes(updatedNote);\n      sendNewPosition(TypeMessage.UPDATE, updatedNote);\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(Rnd, {\n    className: \"note\",\n    disableDragging: isDragging,\n    style: {\n      zIndex: zIndex\n    },\n    size: {\n      width: notes[noteIndex].width,\n      height: notes[noteIndex].height\n    },\n    minWidth: 250,\n    minHeight: 250,\n    position: {\n      x: notes[noteIndex].x,\n      y: notes[noteIndex].y\n    },\n    onDragStop: onDragStopHandler,\n    onResizeStop: onResizeStopHandler,\n    bounds: \"window\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"note-header\",\n    style: {\n      backgroundColor: color || \"gold\"\n    },\n    onClick: () => setZIndex(2),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"color-buttons\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn blue\",\n    value: \"blue\",\n    onClick: changeColorHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn pink\",\n    value: \"pink\",\n    onClick: changeColorHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"btn yellow\",\n    value: \"yellow\",\n    onClick: changeColorHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"cross\",\n    onClick: deleteNoteHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 17\n    }\n  }, \"\\xD7\")), changed ? /*#__PURE__*/React.createElement(\"textarea\", {\n    className: \"note-text\",\n    value: text,\n    onChange: changeTextHandler,\n    autoFocus: true,\n    onBlur: () => {\n      setIsDragging(false);\n      setChanged(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 25\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    id: \"preview\",\n    className: \"note-body\",\n    onClick: () => {\n      setIsDragging(true);\n      setChanged(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(ReactMarkdown, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 29\n    }\n  }, text)));\n};\n\nexport default Note;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/i-note-common/src/components/Note.jsx"],"names":["React","useCallback","useEffect","useState","Rnd","useNote","TypeMessage","ReactMarkdown","Note","note","color","noteIndex","notes","setNotes","connection","isDragging","setIsDragging","changed","setChanged","zIndex","setZIndex","text","setText","updateNote","isEqual","updateStateNotes","updatedNote","filter","id","sendNewPosition","type","send","JSON","stringify","onDragStopHandler","event","data","x","y","UPDATE","onResizeStopHandler","e","direction","ref","delta","position","width","style","height","deleteNoteHandler","DELETE","prev","noteFromState","changeColorHandler","changeColor","target","value","console","log","changeTextHandler","saveChangeText","backgroundColor"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,WAAf,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAsD,OAAtD;AACA,SAAQC,GAAR,QAAkB,WAAlB;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,SAAQC,WAAR,QAA0B,sBAA1B;AACA,OAAOC,aAAP,MAA0B,gBAA1B;;AAGA,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA,IAAD;AAAOC,EAAAA,KAAP;AAAcC,EAAAA,SAAd;AAAyBC,EAAAA,KAAzB;AAAgCC,EAAAA,QAAhC;AAA0CC,EAAAA;AAA1C,CAAD,KAA2D;AAEpE,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM,CAACc,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACgB,MAAD,EAASC,SAAT,IAAsBjB,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACkB,IAAD,EAAOC,OAAP,IAAkBnB,QAAQ,CAACM,IAAI,CAACY,IAAN,CAAhC;AACA,QAAM;AAACE,IAAAA,UAAD;AAAaC,IAAAA;AAAb,MAAwBnB,OAAO,EAArC;AAEAH,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAO,MAAM;AACTkB,MAAAA,SAAS,CAAC,CAAD,CAAT;AACH,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMK,gBAAgB,GAAIC,WAAD,IAAiB;AACtCb,IAAAA,QAAQ,CAAC,MAAM,CAAC,GAAGD,KAAK,CAACe,MAAN,CAAalB,IAAI,IAAIA,IAAI,CAACmB,EAAL,KAAYF,WAAW,CAACE,EAA7C,CAAJ,EAAsDF,WAAtD,CAAP,CAAR;AACH,GAFD;;AAGA,QAAMG,eAAe,GAAG,CAACC,IAAD,EAAOrB,IAAP,KACpBK,UAAU,CAACiB,IAAX,CAAgBC,IAAI,CAACC,SAAL,CAAe,EAAC,GAAGxB,IAAJ;AAAUqB,IAAAA;AAAV,GAAf,CAAhB,CADJ;;AAGA,QAAMI,iBAAiB,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACvC,QAAI3B,IAAI,CAAC4B,CAAL,KAAWD,IAAI,CAACC,CAAhB,IAAqBD,IAAI,CAACE,CAAL,KAAW7B,IAAI,CAAC6B,CAAzC,EAA4C;AACxC,YAAMZ,WAAW,GAAGH,UAAU,CAACd,IAAD,EAAO;AAAC4B,QAAAA,CAAC,EAAED,IAAI,CAACC,CAAT;AAAYC,QAAAA,CAAC,EAAEF,IAAI,CAACE;AAApB,OAAP,CAA9B;AACAT,MAAAA,eAAe,CAACvB,WAAW,CAACiC,MAAb,EAAqBb,WAArB,CAAf;AACAD,MAAAA,gBAAgB,CAACC,WAAD,CAAhB;AACH;AACJ,GAND;;AAQA,QAAMc,mBAAmB,GAAG,CAACC,CAAD,EAAIC,SAAJ,EAAeC,GAAf,EAAoBC,KAApB,EAA2BC,QAA3B,KAAwC;AAChE,UAAMnB,WAAW,GAAGH,UAAU,CAACd,IAAD,EAAO;AACjCqC,MAAAA,KAAK,EAAEH,GAAG,CAACI,KAAJ,CAAUD,KADgB;AAEjCE,MAAAA,MAAM,EAAEL,GAAG,CAACI,KAAJ,CAAUC,MAFe;AAGjCX,MAAAA,CAAC,EAAEQ,QAAQ,CAACR,CAHqB;AAIjCC,MAAAA,CAAC,EAAEO,QAAQ,CAACP;AAJqB,KAAP,CAA9B;;AAMA,QAAI,CAACd,OAAO,CAACf,IAAD,EAAOiB,WAAP,CAAZ,EAAiC;AAC7BD,MAAAA,gBAAgB,CAACC,WAAD,CAAhB;AACAG,MAAAA,eAAe,CAACvB,WAAW,CAACiC,MAAb,EAAqBb,WAArB,CAAf;AACH;AACJ,GAXD;;AAaA,QAAMuB,iBAAiB,GAAG,MAAM;AAC5BpB,IAAAA,eAAe,CAACvB,WAAW,CAAC4C,MAAb,EAAqBzC,IAArB,CAAf;AACAI,IAAAA,QAAQ,CAAEsC,IAAD,IAAU,CAAC,GAAGA,IAAI,CAACxB,MAAL,CAAYyB,aAAa,IAAIA,aAAa,CAACxB,EAAd,KAAqBnB,IAAI,CAACmB,EAAvD,CAAJ,CAAX,CAAR;AACH,GAHD;;AAKA,QAAMyB,kBAAkB,GAAIZ,CAAD,IAAO;AAC9B,UAAMa,WAAW,GAAGb,CAAC,CAACc,MAAF,CAASC,KAA7B;;AACA,QAAIF,WAAW,KAAK5C,KAApB,EAA2B;AACvB+C,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,YAAMhC,WAAW,GAAGH,UAAU,CAACd,IAAD,EAAO;AAACC,QAAAA,KAAK,EAAE4C;AAAR,OAAP,CAA9B;AACA7B,MAAAA,gBAAgB,CAACC,WAAD,CAAhB;AACAG,MAAAA,eAAe,CAACvB,WAAW,CAACiC,MAAb,EAAqBb,WAArB,CAAf;AACH;AACJ,GARD;;AAUA,QAAMiC,iBAAiB,GAAIlB,CAAD,IAAO;AAC7B,UAAMpB,IAAI,GAAGoB,CAAC,CAACc,MAAF,CAASC,KAAtB;AACAlC,IAAAA,OAAO,CAACD,IAAD,CAAP;AACH,GAHD;;AAKAnB,EAAAA,SAAS,CAAC,SAAS0D,cAAT,GAA0B;AAChC,QAAI,CAAC3C,OAAL,EAAc;AACV,YAAMS,WAAW,GAAGH,UAAU,CAACd,IAAD,EAAO;AAACY,QAAAA;AAAD,OAAP,CAA9B;AACAI,MAAAA,gBAAgB,CAACC,WAAD,CAAhB;AACAG,MAAAA,eAAe,CAACvB,WAAW,CAACiC,MAAb,EAAqBb,WAArB,CAAf;AACH;AACJ,GANQ,EAMN,EANM,CAAT;AAUA,sBACI,oBAAC,GAAD;AACI,IAAA,SAAS,EAAC,MADd;AAEI,IAAA,eAAe,EAAEX,UAFrB;AAGI,IAAA,KAAK,EAAE;AAACI,MAAAA,MAAM,EAAEA;AAAT,KAHX;AAII,IAAA,IAAI,EAAE;AAAC2B,MAAAA,KAAK,EAAElC,KAAK,CAACD,SAAD,CAAL,CAAiBmC,KAAzB;AAAgCE,MAAAA,MAAM,EAAEpC,KAAK,CAACD,SAAD,CAAL,CAAiBqC;AAAzD,KAJV;AAKI,IAAA,QAAQ,EAAE,GALd;AAMI,IAAA,SAAS,EAAE,GANf;AAOI,IAAA,QAAQ,EAAE;AAACX,MAAAA,CAAC,EAAEzB,KAAK,CAACD,SAAD,CAAL,CAAiB0B,CAArB;AAAwBC,MAAAA,CAAC,EAAE1B,KAAK,CAACD,SAAD,CAAL,CAAiB2B;AAA5C,KAPd;AAQI,IAAA,UAAU,EAAEJ,iBARhB;AASI,IAAA,YAAY,EAAEM,mBATlB;AAUI,IAAA,MAAM,EAAE,QAVZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAYI;AAAK,IAAA,SAAS,EAAC,aAAf;AACK,IAAA,KAAK,EAAE;AAACqB,MAAAA,eAAe,EAAEnD,KAAK,IAAI;AAA3B,KADZ;AAEK,IAAA,OAAO,EAAE,MAAMU,SAAS,CAAC,CAAD,CAF7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAII;AAAK,IAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAQ,IAAA,SAAS,EAAC,UAAlB;AACQ,IAAA,KAAK,EAAC,MADd;AAEQ,IAAA,OAAO,EAAEiC,kBAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAKI;AAAQ,IAAA,SAAS,EAAC,UAAlB;AACQ,IAAA,KAAK,EAAC,MADd;AAEQ,IAAA,OAAO,EAAEA,kBAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,eASI;AAAQ,IAAA,SAAS,EAAC,YAAlB;AACQ,IAAA,KAAK,EAAC,QADd;AAEQ,IAAA,OAAO,EAAEA,kBAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,CAJJ,eAmBI;AAAK,IAAA,SAAS,EAAC,OAAf;AACK,IAAA,OAAO,EAAEJ,iBADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBJ,CAZJ,EAsCQhC,OAAO,gBAEC;AACI,IAAA,SAAS,EAAC,WADd;AAEI,IAAA,KAAK,EAAEI,IAFX;AAGI,IAAA,QAAQ,EAAEsC,iBAHd;AAII,IAAA,SAAS,MAJb;AAKI,IAAA,MAAM,EAAE,MAAM;AACV3C,MAAAA,aAAa,CAAC,KAAD,CAAb;AACAE,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH,KARL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFD,gBAeC;AAAK,IAAA,EAAE,EAAC,SAAR;AACK,IAAA,SAAS,EAAC,WADf;AAEK,IAAA,OAAO,EAAE,MAAM;AACXF,MAAAA,aAAa,CAAC,IAAD,CAAb;AACAE,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH,KALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAOI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKG,IADL,CAPJ,CArDhB,CADJ;AAqEH,CA5ID;;AA8IA,eAAeb,IAAf","sourcesContent":["import React, {useCallback, useEffect, useState} from \"react\"\nimport {Rnd} from \"react-rnd\"\nimport useNote from \"../hooks/note.hook\";\nimport {TypeMessage} from \"../hooks/TypeMessage\";\nimport ReactMarkdown from 'react-markdown'\n\n\nconst Note = ({note, color, noteIndex, notes, setNotes, connection}) => {\n\n    const [isDragging, setIsDragging] = useState(false);\n    const [changed, setChanged] = useState(false);\n    const [zIndex, setZIndex] = useState(1);\n    const [text, setText] = useState(note.text);\n    const {updateNote, isEqual} = useNote();\n\n    useEffect(() => {\n        return () => {\n            setZIndex(1)\n        }\n    }, [])\n\n    const updateStateNotes = (updatedNote) => {\n        setNotes(() => [...notes.filter(note => note.id !== updatedNote.id), updatedNote])\n    }\n    const sendNewPosition = (type, note) =>\n        connection.send(JSON.stringify({...note, type}))\n\n    const onDragStopHandler = (event, data) => {\n        if (note.x !== data.x && data.y !== note.y) {\n            const updatedNote = updateNote(note, {x: data.x, y: data.y});\n            sendNewPosition(TypeMessage.UPDATE, updatedNote)\n            updateStateNotes(updatedNote)\n        }\n    }\n\n    const onResizeStopHandler = (e, direction, ref, delta, position) => {\n        const updatedNote = updateNote(note, {\n            width: ref.style.width,\n            height: ref.style.height,\n            x: position.x,\n            y: position.y,\n        });\n        if (!isEqual(note, updatedNote)) {\n            updateStateNotes(updatedNote)\n            sendNewPosition(TypeMessage.UPDATE, updatedNote)\n        }\n    }\n\n    const deleteNoteHandler = () => {\n        sendNewPosition(TypeMessage.DELETE, note)\n        setNotes((prev) => [...prev.filter(noteFromState => noteFromState.id !== note.id)])\n    }\n\n    const changeColorHandler = (e) => {\n        const changeColor = e.target.value;\n        if (changeColor !== color) {\n            console.log(\"update color\")\n            const updatedNote = updateNote(note, {color: changeColor});\n            updateStateNotes(updatedNote)\n            sendNewPosition(TypeMessage.UPDATE, updatedNote)\n        }\n    }\n\n    const changeTextHandler = (e) => {\n        const text = e.target.value;\n        setText(text)\n    }\n\n    useEffect(function saveChangeText() {\n        if (!changed) {\n            const updatedNote = updateNote(note, {text});\n            updateStateNotes(updatedNote)\n            sendNewPosition(TypeMessage.UPDATE, updatedNote)\n        }\n    }, [])\n\n\n\n    return (\n        <Rnd\n            className=\"note\"\n            disableDragging={isDragging}\n            style={{zIndex: zIndex}}\n            size={{width: notes[noteIndex].width, height: notes[noteIndex].height}}\n            minWidth={250}\n            minHeight={250}\n            position={{x: notes[noteIndex].x, y: notes[noteIndex].y}}\n            onDragStop={onDragStopHandler}\n            onResizeStop={onResizeStopHandler}\n            bounds={\"window\"}\n        >\n            <div className=\"note-header\"\n                 style={{backgroundColor: color || \"gold\"}}\n                 onClick={() => setZIndex(2)}\n            >\n                <div className=\"color-buttons\">\n                    <button className=\"btn blue\"\n                            value=\"blue\"\n                            onClick={changeColorHandler}\n                    />\n                    <button className=\"btn pink\"\n                            value=\"pink\"\n                            onClick={changeColorHandler}\n                    />\n                    <button className=\"btn yellow\"\n                            value=\"yellow\"\n                            onClick={changeColorHandler}\n                    />\n                </div>\n                {/*{'ID ' + note.id + ' note index :' + noteIndex}*/}\n                <div className=\"cross\"\n                     onClick={deleteNoteHandler}\n                >\n                    &times;\n                </div>\n            </div>\n            {\n                changed\n                    ? (\n                        <textarea\n                            className=\"note-text\"\n                            value={text}\n                            onChange={changeTextHandler}\n                            autoFocus\n                            onBlur={() => {\n                                setIsDragging(false)\n                                setChanged(false)\n                            }}\n                        />\n\n                    )\n                    : (\n                        <div id=\"preview\"\n                             className=\"note-body\"\n                             onClick={() => {\n                                 setIsDragging(true)\n                                 setChanged(true)\n                             }}\n                        >\n                            <ReactMarkdown>\n                                {text}\n                            </ReactMarkdown>\n                        </div>\n                    )\n            }\n        </Rnd>\n    )\n}\n\nexport default Note"]},"metadata":{},"sourceType":"module"}