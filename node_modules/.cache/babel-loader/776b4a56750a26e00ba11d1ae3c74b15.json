{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport useLocal from \"./local.hook\";\nimport { TypeMessage } from \"./TypeMessage\";\n\nconst useWS = (notes, setNotes) => {\n  const [connection, setConnection] = useState(null);\n  const {\n    saveInLocal,\n    getFromLocal,\n    removeInLocal\n  } = useLocal();\n\n  function setArrayNotes(serverNote) {\n    console.log('set array notes');\n    serverNote.forEach(note => {\n      saveInLocal(note.id, JSON.stringify(note));\n    });\n    setNotes(() => serverNote);\n  }\n\n  const isEqual = (localNote, serverNote) => localNote.x === serverNote.x && localNote.y === serverNote.y && localNote.width === serverNote.width && localNote.height === serverNote.height;\n\n  const update = (serverNote, data) => {\n    saveInLocal(serverNote.id, data);\n    const fromLocal = getFromLocal(serverNote.id);\n    const parse = JSON.parse(fromLocal);\n\n    if (notes.length !== 0) {\n      setNotes(prev => [...prev.filter(note => note.id !== serverNote.id), serverNote]);\n    } else {\n      setNotes(prev => [...prev.filter(note => note.id !== serverNote.id), serverNote]);\n    }\n  };\n\n  const updatePosition = ({\n    data\n  }) => {\n    if (data) {\n      const respNote = JSON.parse(data);\n\n      if (!respNote.type && Array.isArray(respNote)) {\n        console.log(\"initial\");\n        setArrayNotes(respNote);\n        return;\n      }\n\n      if (respNote.type === TypeMessage.UPDATE) {\n        console.log(TypeMessage.UPDATE);\n        update(respNote, data);\n      } else if (respNote.type === TypeMessage.CREATE) {\n        console.log(TypeMessage.CREATE);\n        update(respNote, data);\n      } else if (respNote.type === TypeMessage.DELETE) {\n        console.log('remove');\n        removeInLocal(respNote.id);\n        setNotes(notes.filter(note => note.id !== respNote.id));\n      } else {\n        console.error('Incorrect data message', data);\n      }\n    }\n  };\n\n  const test = data => {\n    console.log(data);\n  };\n\n  useEffect(() => {\n    if (connection === null) {\n      const url = window.location.href.replace(/^http/, 'ws').replace(/3000\\/$/, '5000/');\n      console.log(url);\n      const webSocket = new WebSocket(url);\n      webSocket.onmessage = updatePosition;\n      webSocket.onopen = test;\n      setConnection(webSocket);\n    }\n  }, [connection]);\n  return {\n    connection\n  };\n};\n\nexport default useWS;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/i-note-common/src/hooks/ws.hook.js"],"names":["useEffect","useState","useLocal","TypeMessage","useWS","notes","setNotes","connection","setConnection","saveInLocal","getFromLocal","removeInLocal","setArrayNotes","serverNote","console","log","forEach","note","id","JSON","stringify","isEqual","localNote","x","y","width","height","update","data","fromLocal","parse","length","prev","filter","updatePosition","respNote","type","Array","isArray","UPDATE","CREATE","DELETE","error","test","url","window","location","href","replace","webSocket","WebSocket","onmessage","onopen"],"mappings":"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","sourcesContent":["import {useEffect, useState} from \"react\";\nimport useLocal from \"./local.hook\";\nimport {TypeMessage} from \"./TypeMessage\";\n\n\nconst useWS = (notes, setNotes) => {\n\n    const [connection, setConnection] = useState(null);\n    const {saveInLocal, getFromLocal, removeInLocal} = useLocal();\n\n    function setArrayNotes(serverNote) {\n        console.log('set array notes')\n        serverNote.forEach(note => {\n            saveInLocal(note.id, JSON.stringify(note))\n        })\n        setNotes(() => serverNote)\n    }\n\n    const isEqual = (localNote, serverNote) => localNote.x === serverNote.x\n        && localNote.y === serverNote.y\n        && localNote.width === serverNote.width\n        && localNote.height === serverNote.height\n\n\n    const update = (serverNote, data) => {\n        saveInLocal(serverNote.id, data)\n        const fromLocal = getFromLocal(serverNote.id);\n        const parse = JSON.parse(fromLocal);\n            if (notes.length !== 0) {\n                setNotes((prev) => [...prev.filter(note => note.id !== serverNote.id), serverNote])\n            } else {\n                setNotes((prev) => [...prev.filter(note => note.id !== serverNote.id), serverNote])\n            }\n    }\n\n    const updatePosition = ({data}) => {\n        if (data) {\n            const respNote = JSON.parse(data);\n            if (!respNote.type && Array.isArray(respNote)) {\n                console.log(\"initial\")\n                setArrayNotes(respNote);\n                return;\n            }\n            if (respNote.type === TypeMessage.UPDATE) {\n                console.log(TypeMessage.UPDATE)\n                update(respNote, data);\n            } else if (respNote.type === TypeMessage.CREATE) {\n                console.log(TypeMessage.CREATE)\n                update(respNote, data);\n            } else if (respNote.type === TypeMessage.DELETE) {\n                console.log('remove')\n                removeInLocal(respNote.id)\n                setNotes(notes.filter(note => note.id !== respNote.id))\n            } else {\n                console.error('Incorrect data message', data)\n            }\n        }\n    }\n\n    const test = (data) => {\n        console.log(data)\n    }\n\n    useEffect(() => {\n        if (connection === null) {\n            const url = window.location.href\n                .replace(/^http/, 'ws')\n                .replace(/3000\\/$/, '5000/');\n            console.log(url)\n            const webSocket = new WebSocket(url)\n            webSocket.onmessage = updatePosition\n            webSocket.onopen = test\n            setConnection(webSocket)\n        }\n    }, [connection])\n\n    return {connection}\n}\n\nexport default useWS"]},"metadata":{},"sourceType":"module"}