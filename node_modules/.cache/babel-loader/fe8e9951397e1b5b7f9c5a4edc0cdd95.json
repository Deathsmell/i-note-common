{"ast":null,"code":"import { useCallback, useEffect, useState } from \"react\";\nimport { TypeMessage } from \"./TypeMessage\";\n\nconst useWS = (notes, setNotes) => {\n  const [connection, setConnection] = useState(null);\n\n  const update = serverNote => {\n    setNotes(prev => [...prev.filter(note => note.id !== serverNote.id), serverNote]);\n  };\n\n  const updatePosition = useCallback(({\n    data\n  }) => {\n    if (data) {\n      const respNote = JSON.parse(data);\n\n      if (!respNote.type && Array.isArray(respNote)) {\n        setNotes(() => respNote);\n      } else if (respNote.type === TypeMessage.UPDATE || respNote.type === TypeMessage.CREATE) {\n        update(respNote);\n      } else if (respNote.type === TypeMessage.DELETE) {\n        setNotes(notes.filter(note => note.id !== respNote.id));\n      } else if (respNote.type) {\n        console.error('Incorrect data message', data);\n      }\n    }\n  }, [notes, setNotes, update]);\n\n  const connected = () => {\n    console.log(\"connected\");\n  };\n\n  useEffect(() => {\n    if (connection === null) {\n      const url = window.location.href.replace(/^http/, 'ws').replace(/3000\\/$/, '5000/');\n      console.log(url);\n      const webSocket = new WebSocket(url);\n      webSocket.onmessage = updatePosition;\n      webSocket.onopen = connected;\n      setConnection(webSocket);\n    }\n  }, [connection, updatePosition]);\n  return {\n    connection\n  };\n};\n\nexport default useWS;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/i-note-common/src/hooks/ws.hook.js"],"names":["useCallback","useEffect","useState","TypeMessage","useWS","notes","setNotes","connection","setConnection","update","serverNote","prev","filter","note","id","updatePosition","data","respNote","JSON","parse","type","Array","isArray","UPDATE","CREATE","DELETE","console","error","connected","log","url","window","location","href","replace","webSocket","WebSocket","onmessage","onopen"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,SAArB,EAAgCC,QAAhC,QAA+C,OAA/C;AACA,SAAQC,WAAR,QAA0B,eAA1B;;AAGA,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAE/B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,IAAD,CAA5C;;AAEA,QAAMO,MAAM,GAAIC,UAAD,IAAgB;AAC3BJ,IAAAA,QAAQ,CAAEK,IAAD,IAAU,CAAC,GAAGA,IAAI,CAACC,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYJ,UAAU,CAACI,EAA3C,CAAJ,EAAoDJ,UAApD,CAAX,CAAR;AACH,GAFD;;AAIA,QAAMK,cAAc,GAAGf,WAAW,CAAC,CAAC;AAACgB,IAAAA;AAAD,GAAD,KAAY;AAC3C,QAAIA,IAAJ,EAAU;AACN,YAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAjB;;AACA,UAAI,CAACC,QAAQ,CAACG,IAAV,IAAkBC,KAAK,CAACC,OAAN,CAAcL,QAAd,CAAtB,EAA+C;AAC3CX,QAAAA,QAAQ,CAAC,MAAMW,QAAP,CAAR;AACH,OAFD,MAEO,IAAIA,QAAQ,CAACG,IAAT,KAAkBjB,WAAW,CAACoB,MAA9B,IAAwCN,QAAQ,CAACG,IAAT,KAAkBjB,WAAW,CAACqB,MAA1E,EAAkF;AACrFf,QAAAA,MAAM,CAACQ,QAAD,CAAN;AACH,OAFM,MAEA,IAAIA,QAAQ,CAACG,IAAT,KAAkBjB,WAAW,CAACsB,MAAlC,EAA0C;AAC7CnB,QAAAA,QAAQ,CAACD,KAAK,CAACO,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYG,QAAQ,CAACH,EAA1C,CAAD,CAAR;AACH,OAFM,MAEA,IAAIG,QAAQ,CAACG,IAAb,EAAmB;AACtBM,QAAAA,OAAO,CAACC,KAAR,CAAc,wBAAd,EAAwCX,IAAxC;AACH;AACJ;AACJ,GAbiC,EAahC,CAACX,KAAD,EAAOC,QAAP,EAAgBG,MAAhB,CAbgC,CAAlC;;AAeA,QAAMmB,SAAS,GAAG,MAAM;AACpBF,IAAAA,OAAO,CAACG,GAAR,CAAY,WAAZ;AACH,GAFD;;AAIA5B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,UAAU,KAAK,IAAnB,EAAyB;AACrB,YAAMuB,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CACPC,OADO,CACC,OADD,EACU,IADV,EAEPA,OAFO,CAEC,SAFD,EAEY,OAFZ,CAAZ;AAGAR,MAAAA,OAAO,CAACG,GAAR,CAAYC,GAAZ;AACA,YAAMK,SAAS,GAAG,IAAIC,SAAJ,CAAcN,GAAd,CAAlB;AACAK,MAAAA,SAAS,CAACE,SAAV,GAAsBtB,cAAtB;AACAoB,MAAAA,SAAS,CAACG,MAAV,GAAmBV,SAAnB;AACApB,MAAAA,aAAa,CAAC2B,SAAD,CAAb;AACH;AACJ,GAXQ,EAWN,CAAC5B,UAAD,EAAYQ,cAAZ,CAXM,CAAT;AAaA,SAAO;AAACR,IAAAA;AAAD,GAAP;AACH,CAzCD;;AA2CA,eAAeH,KAAf","sourcesContent":["import {useCallback, useEffect, useState} from \"react\";\nimport {TypeMessage} from \"./TypeMessage\";\n\n\nconst useWS = (notes, setNotes) => {\n\n    const [connection, setConnection] = useState(null);\n\n    const update = (serverNote) => {\n        setNotes((prev) => [...prev.filter(note => note.id !== serverNote.id), serverNote])\n    }\n\n    const updatePosition = useCallback(({data}) => {\n        if (data) {\n            const respNote = JSON.parse(data);\n            if (!respNote.type && Array.isArray(respNote)) {\n                setNotes(() => respNote)\n            } else if (respNote.type === TypeMessage.UPDATE || respNote.type === TypeMessage.CREATE) {\n                update(respNote);\n            } else if (respNote.type === TypeMessage.DELETE) {\n                setNotes(notes.filter(note => note.id !== respNote.id))\n            } else if (respNote.type) {\n                console.error('Incorrect data message', data)\n            }\n        }\n    },[notes,setNotes,update])\n\n    const connected = () => {\n        console.log(\"connected\")\n    }\n\n    useEffect(() => {\n        if (connection === null) {\n            const url = window.location.href\n                .replace(/^http/, 'ws')\n                .replace(/3000\\/$/, '5000/');\n            console.log(url)\n            const webSocket = new WebSocket(url)\n            webSocket.onmessage = updatePosition\n            webSocket.onopen = connected\n            setConnection(webSocket)\n        }\n    }, [connection,updatePosition])\n\n    return {connection}\n}\n\nexport default useWS"]},"metadata":{},"sourceType":"module"}