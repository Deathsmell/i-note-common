{"ast":null,"code":"var _jsxFileName = \"/home/deathsmell/WebstormProjects/i-note-common/src/App.js\";\nimport React, { useState } from \"react\";\nimport Note from \"./components/Note\";\nimport useWS from \"./hooks/ws.hook\";\nimport useNote from \"./hooks/note.hook\";\nimport { TypeMessage } from \"./hooks/TypeMessage\";\nimport useLocal from \"./hooks/local.hook\";\n\nconst App = () => {\n  const {\n    defaultNote,\n    updateNote\n  } = useNote();\n  const [notes, setNotes] = useState([]);\n  const {\n    saveInLocal,\n    getFromLocal,\n    removeInLocal\n  } = useLocal();\n\n  function setArrayNotes(serverNote) {\n    serverNote.forEach(note => {\n      saveInLocal(note.id, JSON.stringify(note));\n    });\n    setNotes(serverNote);\n  }\n\n  const compare = (localNote, serverNote) => localNote.x === serverNote.x && localNote.y === serverNote.y && localNote.width === serverNote.width && localNote.height === serverNote.height;\n\n  function update(serverNote, data) {\n    console.log('Update: old notes', notes, \"add\", serverNote);\n    saveInLocal(serverNote.id, data);\n    const index = notes.findIndex(note => note.id === serverNote.id);\n    const fromLocal = getFromLocal(serverNote.id);\n    const parse = JSON.parse(fromLocal);\n\n    if (!compare(parse, serverNote)) {\n      notes[index] = serverNote;\n      setNotes([...notes, serverNote]);\n    }\n  }\n\n  const updatePosition = ({\n    data\n  }) => {\n    if (data) {\n      const respNote = JSON.parse(data); //todo: rewrite on reduce method\n\n      console.log('resp', data, notes);\n\n      if (!respNote.type && Array.isArray(respNote)) {\n        console.log(\"initial\");\n        setArrayNotes(respNote);\n        return;\n      }\n\n      if (respNote.type === TypeMessage.UPDATE) {\n        console.log(TypeMessage.UPDATE);\n        update(respNote, data);\n      } else if (respNote.type === TypeMessage.CREATE) {\n        setNotes([...notes, respNote]);\n        update(respNote, data);\n      } else if (respNote.type === TypeMessage.DELETE) {\n        removeInLocal(respNote.id);\n        setNotes(notes.filter(note => note.id !== respNote.id));\n      } else {\n        console.error('Incorrect data message', data);\n      }\n    }\n  };\n\n  const {\n    connection\n  } = useWS(updatePosition); // useEffect(() => {\n  //     console.log(notes.length);\n  // }, [notes])\n\n  const createHandler = e => {\n    const newNote = updateNote(defaultNote, {\n      x: e.clientX,\n      y: e.clientY,\n      type: TypeMessage.CREATE\n    });\n    connection.send(JSON.stringify(newNote));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: \"aqua\",\n      width: \"100vw\",\n      height: '100vh',\n      cursor: 'pointer'\n    },\n    onDoubleClick: createHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, notes && notes.map((note, index) => {\n    return /*#__PURE__*/React.createElement(Note, {\n      key: index,\n      noteIndex: index,\n      note: note,\n      noteId: note.id,\n      notes: notes,\n      setNotes: setNotes,\n      serverText: note.text,\n      connection: connection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 25\n      }\n    });\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/i-note-common/src/App.js"],"names":["React","useState","Note","useWS","useNote","TypeMessage","useLocal","App","defaultNote","updateNote","notes","setNotes","saveInLocal","getFromLocal","removeInLocal","setArrayNotes","serverNote","forEach","note","id","JSON","stringify","compare","localNote","x","y","width","height","update","data","console","log","index","findIndex","fromLocal","parse","updatePosition","respNote","type","Array","isArray","UPDATE","CREATE","DELETE","filter","error","connection","createHandler","e","newNote","clientX","clientY","send","backgroundColor","cursor","map","text"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\"\nimport Note from \"./components/Note\";\nimport useWS from \"./hooks/ws.hook\";\nimport useNote from \"./hooks/note.hook\";\nimport {TypeMessage} from \"./hooks/TypeMessage\";\nimport useLocal from \"./hooks/local.hook\";\n\n\nconst App = () => {\n\n    const {defaultNote, updateNote} = useNote();\n    const [notes, setNotes] = useState([]);\n    const {saveInLocal, getFromLocal, removeInLocal} = useLocal();\n\n    function setArrayNotes(serverNote) {\n        serverNote.forEach(note => {\n            saveInLocal(note.id, JSON.stringify(note))\n        })\n        setNotes(serverNote)\n    }\n\n    const compare = (localNote, serverNote) => localNote.x === serverNote.x\n        && localNote.y === serverNote.y\n        && localNote.width === serverNote.width\n        && localNote.height === serverNote.height\n\n    \n    function update(serverNote, data) {\n        console.log('Update: old notes', notes, \"add\", serverNote)\n        saveInLocal(serverNote.id, data)\n        const index = notes.findIndex(note => note.id === serverNote.id);\n        const fromLocal = getFromLocal(serverNote.id);\n        const parse = JSON.parse(fromLocal);\n        if (!compare(parse, serverNote)) {\n            notes[index] = serverNote\n            setNotes([...notes, serverNote])\n        }\n    }\n\n    const updatePosition = ({data}) => {\n        if (data) {\n            const respNote = JSON.parse(data);\n            //todo: rewrite on reduce method\n            console.log('resp', data, notes)\n            if (!respNote.type && Array.isArray(respNote)) {\n                console.log(\"initial\")\n                setArrayNotes(respNote);\n                return;\n            }\n            if (respNote.type === TypeMessage.UPDATE) {\n                console.log(TypeMessage.UPDATE,)\n                update(respNote, data);\n            } else if (respNote.type === TypeMessage.CREATE) {\n                setNotes([...notes, respNote])\n                update(respNote, data);\n            } else if (respNote.type === TypeMessage.DELETE) {\n                removeInLocal(respNote.id)\n                setNotes(notes.filter(note => note.id !== respNote.id))\n            } else {\n                console.error('Incorrect data message', data)\n            }\n        }\n    }\n\n    const {connection} = useWS(updatePosition);\n\n    // useEffect(() => {\n    //     console.log(notes.length);\n    // }, [notes])\n\n    const createHandler = (e) => {\n        const newNote = updateNote(defaultNote, {x: e.clientX, y: e.clientY, type: TypeMessage.CREATE});\n        connection.send(JSON.stringify(newNote))\n    }\n\n    return (\n        <div style={{backgroundColor: \"aqua\", width: \"100vw\", height: '100vh', cursor: 'pointer'}}\n             onDoubleClick={createHandler}\n        >\n            {notes &&\n            notes.map((note, index) => {\n                    return (\n                        <Note key={index}\n                              noteIndex={index}\n                              note={note}\n                              noteId={note.id}\n                              notes={notes}\n                              setNotes={setNotes}\n                              serverText={note.text}\n                              connection={connection}\n                        />\n                    )\n                }\n            )\n            }\n        </div>\n    )\n}\n\n\nexport default App"]},"metadata":{},"sourceType":"module"}