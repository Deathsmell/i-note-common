{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport useLocal from \"./local.hook\";\nimport { TypeMessage } from \"./TypeMessage\";\n\nconst useWS = ([notes, setNotes]) => {\n  const [connection, setConnection] = useState(null);\n  const {\n    saveInLocal,\n    getFromLocal,\n    removeInLocal\n  } = useLocal();\n\n  const compare = (localNote, serverNote) => {\n    console.log(localNote, typeof localNote);\n    console.log(serverNote, typeof serverNote);\n  };\n\n  const updatePosition = ({\n    data\n  }) => {\n    if (data) {\n      const serverNote = JSON.parse(data);\n      console.log('serverNote', serverNote, serverNote.type);\n\n      if (!serverNote.type && serverNote) {\n        serverNote.forEach(note => {\n          saveInLocal(note.id, JSON.stringify(note));\n        });\n        console.log(serverNote);\n        setNotes(serverNote);\n        return;\n      }\n\n      saveInLocal(serverNote.id, data);\n      const index = notes.findIndex(note => note.id === serverNote.id);\n\n      if (serverNote.type === TypeMessage.UPDATE) {\n        const fromLocal = getFromLocal(serverNote.id);\n        const parse = JSON.parse(fromLocal);\n        compare(parse, serverNote);\n\n        if (parse !== serverNote) {\n          const splice = notes.splice(index, 1, serverNote);\n          setNotes(() => splice);\n        }\n      } else if (serverNote.type === TypeMessage.CREATE) {\n        setNotes([...notes, serverNote]);\n      } else if (serverNote.type === TypeMessage.DELETE) {\n        removeInLocal(serverNote.id);\n        setNotes(notes.splice(index, 1));\n      } else {\n        console.error('Incorrect data message', data);\n      }\n    }\n  };\n\n  const getPositions = ({\n    data\n  }) => {\n    console.log(\"get positions\", data);\n\n    if (data) {\n      const serverNotes = JSON.parse(data);\n      setNotes(serverNotes);\n      serverNotes.forEach(note => {\n        saveInLocal(note.id, note);\n      });\n    }\n  };\n\n  const test = ({\n    data\n  }) => {\n    console.log(data);\n  };\n\n  useEffect(() => {\n    if (connection === null) {\n      const webSocket = new WebSocket('ws://localhost:8080'); // webSocket.onmessage = updatePosition\n      // webSocket.onopen = getPositions\n\n      webSocket.onopen = test;\n      webSocket.onmessage = updatePosition;\n      setConnection(webSocket);\n    }\n  }, [connection]);\n  return {\n    connection\n  };\n};\n\nexport default useWS;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/i-note-common/src/hooks/ws.hook.js"],"names":["useEffect","useState","useLocal","TypeMessage","useWS","notes","setNotes","connection","setConnection","saveInLocal","getFromLocal","removeInLocal","compare","localNote","serverNote","console","log","updatePosition","data","JSON","parse","type","forEach","note","id","stringify","index","findIndex","UPDATE","fromLocal","splice","CREATE","DELETE","error","getPositions","serverNotes","test","webSocket","WebSocket","onopen","onmessage"],"mappings":"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","sourcesContent":["import {useEffect, useState} from \"react\";\nimport useLocal from \"./local.hook\";\nimport {TypeMessage} from \"./TypeMessage\";\n\n\nconst useWS = ([notes, setNotes]) => {\n\n    const [connection, setConnection] = useState(null);\n    const {saveInLocal, getFromLocal, removeInLocal} = useLocal();\n\n    const compare = (localNote, serverNote) => {\n        console.log(localNote,typeof localNote)\n        console.log(serverNote,typeof serverNote)\n    }\n\n    const updatePosition = ({data}) => {\n        if (data) {\n            const serverNote = JSON.parse(data);\n            console.log('serverNote', serverNote, serverNote.type)\n            if (!serverNote.type && serverNote) {\n                serverNote.forEach(note => {\n                    saveInLocal(note.id, JSON.stringify(note))\n                })\n                console.log(serverNote)\n                setNotes(serverNote)\n                return;\n            }\n            saveInLocal(serverNote.id, data)\n            const index = notes.findIndex(note => note.id === serverNote.id);\n            if (serverNote.type === TypeMessage.UPDATE) {\n                const fromLocal = getFromLocal(serverNote.id);\n                const parse = JSON.parse(fromLocal);\n                compare(parse,serverNote)\n                if (parse !== serverNote) {\n                    const splice = notes.splice(index, 1, serverNote);\n                    setNotes(() => splice)\n                }\n            } else if (serverNote.type === TypeMessage.CREATE) {\n                setNotes([...notes, serverNote])\n            } else if (serverNote.type === TypeMessage.DELETE) {\n                removeInLocal(serverNote.id)\n                setNotes(notes.splice(index, 1))\n            } else {\n                console.error('Incorrect data message', data)\n            }\n        }\n    }\n\n    const getPositions = ({data}) => {\n        console.log(\"get positions\", data)\n        if (data) {\n            const serverNotes = JSON.parse(data);\n            setNotes(serverNotes)\n            serverNotes.forEach(note => {\n                saveInLocal(note.id, note)\n            })\n        }\n    }\n\n    const test = ({data}) => {\n        console.log(data)\n    }\n\n    useEffect(() => {\n        if (connection === null) {\n            const webSocket = new WebSocket('ws://localhost:8080');\n            // webSocket.onmessage = updatePosition\n            // webSocket.onopen = getPositions\n            webSocket.onopen = test\n            webSocket.onmessage = updatePosition\n            setConnection(webSocket)\n        }\n    }, [connection])\n\n    return {connection}\n}\n\nexport default useWS"]},"metadata":{},"sourceType":"module"}