{"ast":null,"code":"import { useCallback, useEffect, useState } from \"react\";\nimport { TypeMessage } from \"./TypeMessage\";\n\nconst useWS = (notes, setNotes) => {\n  const [connection, setConnection] = useState(null);\n  const update = useCallback(async serverNote => {\n    await setNotes(prev => [...prev.filter(note => note.id !== serverNote.id), serverNote]);\n  }, [notes, setNotes]);\n  const reducer = useCallback((note, action) => {\n    switch (action) {\n      case TypeMessage.CREATE:\n        return update(note);\n\n      case TypeMessage.UPDATE:\n        return update(note);\n\n      case TypeMessage.DELETE:\n        return setNotes(prev => [...prev.filter(noteFromState => noteFromState.id !== note.id)]);\n\n      default:\n        if (Array.isArray(note)) {\n          setNotes(() => note);\n        } else {\n          console.error('Incorrect data message', action, note);\n        }\n\n    }\n  }, [setNotes, update]);\n  const updatePosition = useCallback(({\n    data\n  }) => {\n    if (data) {\n      const respNote = JSON.parse(data);\n      reducer(respNote, respNote.type);\n    }\n  }, [reducer]);\n\n  const connected = () => {\n    console.log(\"connected\");\n  };\n\n  useEffect(() => {\n    if (connection === null) {\n      const url = window.location.href.replace(/^http/, 'ws').replace(/3000\\/$/, '5000/');\n      console.log(url);\n      const webSocket = new WebSocket(url);\n      webSocket.onmessage = updatePosition;\n      webSocket.onopen = connected;\n      setConnection(webSocket);\n    }\n  }, [connection, updatePosition]);\n  return {\n    connection\n  };\n};\n\nexport default useWS;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/i-note-common/src/hooks/ws.hook.js"],"names":["useCallback","useEffect","useState","TypeMessage","useWS","notes","setNotes","connection","setConnection","update","serverNote","prev","filter","note","id","reducer","action","CREATE","UPDATE","DELETE","noteFromState","Array","isArray","console","error","updatePosition","data","respNote","JSON","parse","type","connected","log","url","window","location","href","replace","webSocket","WebSocket","onmessage","onopen"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,SAArB,EAAgCC,QAAhC,QAA+C,OAA/C;AACA,SAAQC,WAAR,QAA0B,eAA1B;;AAGA,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAE/B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,IAAD,CAA5C;AAEA,QAAMO,MAAM,GAAGT,WAAW,CAAC,MAAOU,UAAP,IAAsB;AAC7C,UAAMJ,QAAQ,CAAEK,IAAD,IAAU,CAAC,GAAGA,IAAI,CAACC,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYJ,UAAU,CAACI,EAA3C,CAAJ,EAAoDJ,UAApD,CAAX,CAAd;AACH,GAFyB,EAEvB,CAACL,KAAD,EAAOC,QAAP,CAFuB,CAA1B;AAIA,QAAMS,OAAO,GAAGf,WAAW,CAAC,CAACa,IAAD,EAAOG,MAAP,KAAkB;AAC1C,YAAQA,MAAR;AACI,WAAKb,WAAW,CAACc,MAAjB;AACI,eAAOR,MAAM,CAACI,IAAD,CAAb;;AACJ,WAAKV,WAAW,CAACe,MAAjB;AACI,eAAOT,MAAM,CAACI,IAAD,CAAb;;AACJ,WAAKV,WAAW,CAACgB,MAAjB;AACI,eAAOb,QAAQ,CAAEK,IAAD,IAAU,CAAC,GAAGA,IAAI,CAACC,MAAL,CAAYQ,aAAa,IAAIA,aAAa,CAACN,EAAd,KAAqBD,IAAI,CAACC,EAAvD,CAAJ,CAAX,CAAf;;AACJ;AACI,YAAIO,KAAK,CAACC,OAAN,CAAcT,IAAd,CAAJ,EAAyB;AACrBP,UAAAA,QAAQ,CAAC,MAAMO,IAAP,CAAR;AACH,SAFD,MAEO;AACHU,UAAAA,OAAO,CAACC,KAAR,CAAc,wBAAd,EAAwCR,MAAxC,EAAgDH,IAAhD;AACH;;AAZT;AAcH,GAf0B,EAexB,CAACP,QAAD,EAAWG,MAAX,CAfwB,CAA3B;AAiBA,QAAMgB,cAAc,GAAGzB,WAAW,CAAC,CAAC;AAAC0B,IAAAA;AAAD,GAAD,KAAY;AAC3C,QAAIA,IAAJ,EAAU;AACN,YAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAjB;AACAX,MAAAA,OAAO,CAACY,QAAD,EAAWA,QAAQ,CAACG,IAApB,CAAP;AACH;AACJ,GALiC,EAK/B,CAACf,OAAD,CAL+B,CAAlC;;AAOA,QAAMgB,SAAS,GAAG,MAAM;AACpBR,IAAAA,OAAO,CAACS,GAAR,CAAY,WAAZ;AACH,GAFD;;AAIA/B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,UAAU,KAAK,IAAnB,EAAyB;AACrB,YAAM0B,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CACPC,OADO,CACC,OADD,EACU,IADV,EAEPA,OAFO,CAEC,SAFD,EAEY,OAFZ,CAAZ;AAGAd,MAAAA,OAAO,CAACS,GAAR,CAAYC,GAAZ;AACA,YAAMK,SAAS,GAAG,IAAIC,SAAJ,CAAcN,GAAd,CAAlB;AACAK,MAAAA,SAAS,CAACE,SAAV,GAAsBf,cAAtB;AACAa,MAAAA,SAAS,CAACG,MAAV,GAAmBV,SAAnB;AACAvB,MAAAA,aAAa,CAAC8B,SAAD,CAAb;AACH;AACJ,GAXQ,EAWN,CAAC/B,UAAD,EAAakB,cAAb,CAXM,CAAT;AAaA,SAAO;AAAClB,IAAAA;AAAD,GAAP;AACH,CAlDD;;AAoDA,eAAeH,KAAf","sourcesContent":["import {useCallback, useEffect, useState} from \"react\";\nimport {TypeMessage} from \"./TypeMessage\";\n\n\nconst useWS = (notes, setNotes) => {\n\n    const [connection, setConnection] = useState(null);\n\n    const update = useCallback(async (serverNote) => {\n        await setNotes((prev) => [...prev.filter(note => note.id !== serverNote.id), serverNote])\n    }, [notes,setNotes])\n\n    const reducer = useCallback((note, action) => {\n        switch (action) {\n            case TypeMessage.CREATE:\n                return update(note)\n            case TypeMessage.UPDATE:\n                return update(note)\n            case TypeMessage.DELETE:\n                return setNotes((prev) => [...prev.filter(noteFromState => noteFromState.id !== note.id)])\n            default:\n                if (Array.isArray(note)) {\n                    setNotes(() => note)\n                } else {\n                    console.error('Incorrect data message', action, note)\n                }\n        }\n    }, [setNotes, update])\n\n    const updatePosition = useCallback(({data}) => {\n        if (data) {\n            const respNote = JSON.parse(data);\n            reducer(respNote, respNote.type)\n        }\n    }, [reducer])\n\n    const connected = () => {\n        console.log(\"connected\")\n    }\n\n    useEffect(() => {\n        if (connection === null) {\n            const url = window.location.href\n                .replace(/^http/, 'ws')\n                .replace(/3000\\/$/, '5000/');\n            console.log(url)\n            const webSocket = new WebSocket(url)\n            webSocket.onmessage = updatePosition\n            webSocket.onopen = connected\n            setConnection(webSocket)\n        }\n    }, [connection, updatePosition])\n\n    return {connection}\n}\n\nexport default useWS"]},"metadata":{},"sourceType":"module"}