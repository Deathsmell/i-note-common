{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport useLocal from \"./local.hook\";\nimport { TypeMessage } from \"./TypeMessage\";\n\nconst useWS = ({\n  notesState: [notes, setNotes],\n  location\n}) => {\n  const [connection, setConnection] = useState(null);\n  const {\n    saveInLocal,\n    getFromLocal,\n    removeInLocal\n  } = useLocal();\n\n  const compare = (localNote, serverNote) => localNote.x === serverNote.x && localNote.y === serverNote.y && localNote.width === serverNote.width && localNote.height === serverNote.height;\n\n  function setArrayNotes(serverNote) {\n    serverNote.forEach(note => {\n      saveInLocal(note.id, JSON.stringify(note));\n    });\n    setNotes(serverNote);\n  }\n\n  function update(serverNote, data) {\n    saveInLocal(serverNote.id, data);\n    const index = notes.findIndex(note => note.id === serverNote.id);\n    const fromLocal = getFromLocal(serverNote.id);\n    const parse = JSON.parse(fromLocal);\n\n    if (!compare(parse, serverNote)) {\n      notes[index] = serverNote;\n      setNotes([...notes]);\n    }\n  }\n\n  const updatePosition = ({\n    data\n  }) => {\n    if (data) {\n      const respNote = JSON.parse(data); //todo: rewrite on reduce method\n\n      if (!respNote.type && Array.isArray(respNote)) {\n        setArrayNotes(respNote);\n        return;\n      }\n\n      if (respNote.type === TypeMessage.UPDATE) {\n        update(respNote, data);\n      } else if (respNote.type === TypeMessage.CREATE) {\n        setNotes([...notes, respNote]);\n      } else if (respNote.type === TypeMessage.DELETE) {\n        removeInLocal(respNote.id);\n        setNotes(notes.filter(note => note.id !== respNote.id));\n      } else {\n        console.error('Incorrect data message', data);\n      }\n    }\n  }; // const getPositions = ({data}) => {\n  //     console.log(\"get positions\", data)\n  //     if (data) {\n  //         const serverNotes = JSON.parse(data);\n  //         setNotes(serverNotes)\n  //         serverNotes.forEach(note => {\n  //             saveInLocal(note.id, note)\n  //         })\n  //     }\n  // }\n\n\n  const test = data => {\n    console.log(data);\n  };\n\n  useEffect(() => {\n    if (connection === null) {\n      const webSocket = new WebSocket(location.origin.replace(/^http/));\n      webSocket.onmessage = updatePosition;\n      webSocket.onopen = test;\n      setConnection(webSocket);\n    }\n  }, [connection]);\n  return {\n    connection\n  };\n};\n\nexport default useWS;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/i-note-common/src/hooks/ws.hook.js"],"names":["useEffect","useState","useLocal","TypeMessage","useWS","notesState","notes","setNotes","location","connection","setConnection","saveInLocal","getFromLocal","removeInLocal","compare","localNote","serverNote","x","y","width","height","setArrayNotes","forEach","note","id","JSON","stringify","update","data","index","findIndex","fromLocal","parse","updatePosition","respNote","type","Array","isArray","UPDATE","CREATE","DELETE","filter","console","error","test","log","webSocket","WebSocket","origin","replace","onmessage","onopen"],"mappings":"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","sourcesContent":["import {useEffect, useState} from \"react\";\nimport useLocal from \"./local.hook\";\nimport {TypeMessage} from \"./TypeMessage\";\n\n\nconst useWS = ({notesState: [notes, setNotes], location}) => {\n\n    const [connection, setConnection] = useState(null);\n    const {saveInLocal, getFromLocal, removeInLocal} = useLocal();\n\n    const compare = (localNote, serverNote) => localNote.x === serverNote.x\n        && localNote.y === serverNote.y\n        && localNote.width === serverNote.width\n        && localNote.height === serverNote.height\n\n\n    function setArrayNotes(serverNote) {\n        serverNote.forEach(note => {\n            saveInLocal(note.id, JSON.stringify(note))\n        })\n        setNotes(serverNote)\n    }\n\n    function update(serverNote, data) {\n        saveInLocal(serverNote.id, data)\n        const index = notes.findIndex(note => note.id === serverNote.id);\n        const fromLocal = getFromLocal(serverNote.id);\n        const parse = JSON.parse(fromLocal);\n        if (!compare(parse, serverNote)) {\n            notes[index] = serverNote\n            setNotes([...notes])\n        }\n    }\n\n    const updatePosition = ({data}) => {\n        if (data) {\n            const respNote = JSON.parse(data);\n            //todo: rewrite on reduce method\n            if (!respNote.type && Array.isArray(respNote)) {\n                setArrayNotes(respNote);\n                return;\n            }\n            if (respNote.type === TypeMessage.UPDATE) {\n                update(respNote, data);\n            } else if (respNote.type === TypeMessage.CREATE) {\n                setNotes([...notes, respNote])\n            } else if (respNote.type === TypeMessage.DELETE) {\n                removeInLocal(respNote.id)\n                setNotes(notes.filter(note => note.id !== respNote.id))\n            } else {\n                console.error('Incorrect data message', data)\n            }\n        }\n    }\n\n    // const getPositions = ({data}) => {\n    //     console.log(\"get positions\", data)\n    //     if (data) {\n    //         const serverNotes = JSON.parse(data);\n    //         setNotes(serverNotes)\n    //         serverNotes.forEach(note => {\n    //             saveInLocal(note.id, note)\n    //         })\n    //     }\n    // }\n\n    const test = (data) => {\n        console.log(data)\n    }\n\n    useEffect(() => {\n        if (connection === null) {\n            const webSocket = new WebSocket(location.origin.replace(/^http/));\n            webSocket.onmessage = updatePosition\n            webSocket.onopen = test\n            setConnection(webSocket)\n        }\n    }, [connection])\n\n    return {connection}\n}\n\nexport default useWS"]},"metadata":{},"sourceType":"module"}