{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport useLocal from \"./local.hook\";\nimport { TypeMessage } from \"./TypeMessage\";\n\nconst useWS = ([notes, setNotes]) => {\n  const [connection, setConnection] = useState(null);\n  const {\n    saveInLocal,\n    removeInLocal\n  } = useLocal();\n\n  const updatePosition = ({\n    data\n  }) => {\n    if (data) {\n      const serverNote = JSON.parse(data);\n      console.log('serverNote', serverNote, !data.type);\n\n      if (!data.type && serverNote) {\n        serverNote.forEach(note => {\n          saveInLocal(note.id, JSON.stringify(note));\n        });\n        console.log(serverNote);\n        setNotes(serverNote);\n        return;\n      }\n\n      saveInLocal(serverNote.id, data);\n      const index = notes.findIndex(note => note.id === serverNote.id);\n\n      if (data.type === TypeMessage.UPDATE) {\n        setNotes(notes.splice(index, 1, serverNote));\n      } else if (data.type === TypeMessage.CREATE) {\n        setNotes([...notes, serverNote]);\n      } else if (data.type === TypeMessage.DELETE) {\n        removeInLocal(serverNote.id);\n        setNotes(notes.splice(index, 1));\n      } else {\n        console.error('Incorrect data message', data);\n      }\n    }\n  };\n\n  const getPositions = ({\n    data\n  }) => {\n    console.log(\"get positions\", data);\n\n    if (data) {\n      const serverNotes = JSON.parse(data);\n      setNotes(serverNotes);\n      serverNotes.forEach(note => {\n        saveInLocal(note.id, note);\n      });\n    }\n  };\n\n  const test = ({\n    data\n  }) => {\n    console.log(data);\n  };\n\n  useEffect(() => {\n    if (connection === null) {\n      const webSocket = new WebSocket('ws://localhost:8080'); // webSocket.onmessage = updatePosition\n      // webSocket.onopen = getPositions\n\n      webSocket.onopen = test;\n      webSocket.onmessage = updatePosition;\n      setConnection(webSocket);\n    }\n  }, [connection]);\n  return {\n    connection\n  };\n};\n\nexport default useWS;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/i-note-common/src/hooks/ws.hook.js"],"names":["useEffect","useState","useLocal","TypeMessage","useWS","notes","setNotes","connection","setConnection","saveInLocal","removeInLocal","updatePosition","data","serverNote","JSON","parse","console","log","type","forEach","note","id","stringify","index","findIndex","UPDATE","splice","CREATE","DELETE","error","getPositions","serverNotes","test","webSocket","WebSocket","onopen","onmessage"],"mappings":"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","sourcesContent":["import {useEffect, useState} from \"react\";\nimport useLocal from \"./local.hook\";\nimport {TypeMessage} from \"./TypeMessage\";\n\n\nconst useWS = ([notes, setNotes]) => {\n\n    const [connection, setConnection] = useState(null);\n    const {saveInLocal, removeInLocal} = useLocal();\n\n    const updatePosition = ({data}) => {\n        if (data) {\n            const serverNote = JSON.parse(data);\n            console.log('serverNote',serverNote,!data.type )\n            if (!data.type && serverNote) {\n                serverNote.forEach(note => {\n                    saveInLocal(note.id, JSON.stringify(note))\n                })\n                console.log(serverNote)\n                setNotes(serverNote)\n                return;\n            }\n            saveInLocal(serverNote.id, data)\n            const index = notes.findIndex(note => note.id === serverNote.id);\n            if (data.type === TypeMessage.UPDATE) {\n                setNotes(notes.splice(index, 1, serverNote))\n            } else if (data.type === TypeMessage.CREATE) {\n                setNotes([...notes, serverNote])\n            } else if (data.type === TypeMessage.DELETE) {\n                removeInLocal(serverNote.id)\n                setNotes(notes.splice(index, 1))\n            } else {\n                console.error('Incorrect data message', data)\n            }\n        }\n    }\n\n    const getPositions = ({data}) => {\n        console.log(\"get positions\", data)\n        if (data) {\n            const serverNotes = JSON.parse(data);\n            setNotes(serverNotes)\n            serverNotes.forEach(note => {\n                saveInLocal(note.id, note)\n            })\n        }\n    }\n\n    const test = ({data}) => {\n        console.log(data)\n    }\n\n    useEffect(() => {\n        if (connection === null) {\n            const webSocket = new WebSocket('ws://localhost:8080');\n            // webSocket.onmessage = updatePosition\n            // webSocket.onopen = getPositions\n            webSocket.onopen = test\n            webSocket.onmessage = updatePosition\n            setConnection(webSocket)\n        }\n    }, [connection])\n\n    return {connection}\n}\n\nexport default useWS"]},"metadata":{},"sourceType":"module"}