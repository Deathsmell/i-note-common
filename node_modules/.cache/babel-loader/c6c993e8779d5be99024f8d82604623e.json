{"ast":null,"code":"var _jsxFileName = \"/home/deathsmell/WebstormProjects/i-note-common/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Note from \"./components/Note\";\nimport useLocal from \"./hooks/local.hook\";\nimport { TypeMessage } from \"./hooks/TypeMessage\";\n\nconst App = () => {\n  const notesState = useState([]);\n  const [notes, setNotes] = notesState;\n  const [connection, setConnection] = useState(null);\n  const {\n    saveInLocal,\n    removeInLocal\n  } = useLocal();\n\n  const updatePosition = ({\n    data\n  }) => {\n    if (data) {\n      const serverNote = JSON.parse(data);\n\n      if (!data.type && serverNote) {\n        serverNote.forEach(note => {\n          saveInLocal(note.id, JSON.stringify(note));\n        });\n        console.log(serverNote);\n        setNotes(serverNote);\n        return;\n      }\n\n      saveInLocal(serverNote.id, data);\n      const index = notes.findIndex(note => note.id === serverNote.id);\n\n      if (data.type === TypeMessage.UPDATE) {\n        setNotes(notes.splice(index, 1, serverNote));\n      } else if (data.type === TypeMessage.CREATE) {\n        setNotes([...notes, serverNote]);\n      } else if (data.type === TypeMessage.DELETE) {\n        removeInLocal(serverNote.id);\n        setNotes(notes.splice(index, 1));\n      } else {\n        console.error('Incorrect data message', data);\n      }\n    }\n  };\n\n  const getPositions = ({\n    data\n  }) => {\n    console.log(\"get positions\", data);\n\n    if (data) {\n      const serverNotes = JSON.parse(data);\n      setNotes(serverNotes);\n      serverNotes.forEach(note => {\n        saveInLocal(note.id, note);\n      });\n    }\n  };\n\n  const test = ({\n    data\n  }) => {\n    console.log(data);\n  };\n\n  useEffect(() => {\n    if (connection === null) {\n      const webSocket = new WebSocket('ws://localhost:8080'); // webSocket.onmessage = updatePosition\n      // webSocket.onopen = getPositions\n\n      webSocket.onopen = test;\n      webSocket.onmessage = updatePosition;\n      setConnection(webSocket);\n    }\n  }, [connection]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: \"aqua\",\n      width: \"100vw\",\n      height: '100vh'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, notes.length && notes.map((note, index) => {\n    console.log(\"notes\", note);\n    return /*#__PURE__*/React.createElement(Note, {\n      key: index,\n      noteId: note.id,\n      notes: notes,\n      setNotes: setNotes,\n      color: note.color,\n      width: note.width,\n      height: note.height,\n      x: note.x,\n      y: note.x,\n      serverText: note.text,\n      connection: connection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 29\n      }\n    });\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/i-note-common/src/App.js"],"names":["React","useEffect","useState","Note","useLocal","TypeMessage","App","notesState","notes","setNotes","connection","setConnection","saveInLocal","removeInLocal","updatePosition","data","serverNote","JSON","parse","type","forEach","note","id","stringify","console","log","index","findIndex","UPDATE","splice","CREATE","DELETE","error","getPositions","serverNotes","test","webSocket","WebSocket","onopen","onmessage","backgroundColor","width","height","length","map","color","x","text"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\"\nimport Note from \"./components/Note\";\nimport useLocal from \"./hooks/local.hook\";\nimport {TypeMessage} from \"./hooks/TypeMessage\";\n\n\nconst App = () => {\n\n    const notesState = useState([]);\n    const [notes,setNotes] = notesState;\n    const [connection, setConnection] = useState(null);\n    const {saveInLocal, removeInLocal} = useLocal();\n\n    const updatePosition = ({data}) => {\n        if (data) {\n            const serverNote = JSON.parse(data);\n            if (!data.type && serverNote) {\n                serverNote.forEach(note => {\n                    saveInLocal(note.id, JSON.stringify(note))\n                })\n                console.log(serverNote)\n                setNotes(serverNote)\n                return;\n            }\n            saveInLocal(serverNote.id, data)\n            const index = notes.findIndex(note => note.id === serverNote.id);\n            if (data.type === TypeMessage.UPDATE) {\n                setNotes(notes.splice(index, 1, serverNote))\n            } else if (data.type === TypeMessage.CREATE) {\n                setNotes([...notes, serverNote])\n            } else if (data.type === TypeMessage.DELETE) {\n                removeInLocal(serverNote.id)\n                setNotes(notes.splice(index, 1))\n            } else {\n                console.error('Incorrect data message', data)\n            }\n        }\n    }\n\n    const getPositions = ({data}) => {\n        console.log(\"get positions\", data)\n        if (data) {\n            const serverNotes = JSON.parse(data);\n            setNotes(serverNotes)\n            serverNotes.forEach(note => {\n                saveInLocal(note.id, note)\n            })\n        }\n    }\n\n    const test = ({data}) => {\n        console.log(data)\n    }\n\n    useEffect(() => {\n        if (connection === null) {\n            const webSocket = new WebSocket('ws://localhost:8080');\n            // webSocket.onmessage = updatePosition\n            // webSocket.onopen = getPositions\n            webSocket.onopen = test\n            webSocket.onmessage = updatePosition\n            setConnection(webSocket)\n        }\n    }, [connection])\n\n    return (\n        <div style={{backgroundColor: \"aqua\", width: \"100vw\", height: '100vh'}}>\n            { notes.length &&\n                notes.map((note, index) => {\n                    console.log(\"notes\", note)\n                        return (\n                            <Note key={index}\n                                  noteId={note.id}\n                                  notes={notes}\n                                  setNotes={setNotes}\n                                  color={note.color}\n                                  width={note.width}\n                                  height={note.height}\n                                  x={note.x}\n                                  y={note.x}\n                                  serverText={note.text}\n                                  connection={connection}\n                            />\n                        )\n                    }\n                )\n            }\n        </div>\n    )\n}\n\n\nexport default App"]},"metadata":{},"sourceType":"module"}