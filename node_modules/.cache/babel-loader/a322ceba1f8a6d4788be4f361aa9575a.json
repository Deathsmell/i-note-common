{"ast":null,"code":"import Stomp from \"@stomp/stompjs\";\nimport { useEffect, useState } from \"react\";\n\nconst useWebSocket = isAuthenticated => {\n  const [stompClient, setStompClient] = useState(null);\n  const [hasConnect, setHasConnect] = useState(false);\n  let handlers = [];\n  useEffect(() => {\n    if (isAuthenticated) connect();\n  }, [isAuthenticated]);\n  useEffect(() => {\n    if (stompClient) {\n      setTimeout(() => setHasConnect(true), 1000);\n    } else {\n      setHasConnect(false);\n    }\n  }, [stompClient]);\n\n  const connect = () => {\n    const client = new Stomp.Client();\n    client.brokerURL = \"wss://localhost:8080\";\n    client.connect('guest', frame => console.log(frame));\n    setStompClient(client);\n  };\n\n  const addHandler = handler => handlers.push(handler);\n\n  const responseHandler = iMassage => {\n    handlers.forEach(handler => {\n      console.log(\"HANDLER: \", iMassage, handler);\n      handler(iMassage);\n    });\n  };\n\n  const subscribe = topic => {\n    if (hasConnect) {\n      return stompClient.subscribe(topic, responseHandler);\n    }\n  };\n\n  const sendMessage = (to, message = \"\") => {\n    message = typeof message === \"string\" ? \"\" : JSON.stringify(message);\n    stompClient.send(`/app${to}`, {}, message);\n  };\n\n  const disconnect = () => {\n    if (stompClient !== null) {\n      stompClient.disconnect();\n      console.log(\"Disconnected\");\n    } else {\n      console.log(\"Stomp client dont exist!\");\n    }\n  };\n\n  return {\n    connect,\n    disconnect,\n    subscribe,\n    sendMessage,\n    addHandler,\n    hasConnect\n  };\n};\n\nexport default useWebSocket;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/i-note-common/src/hooks/ws.hooks.js"],"names":["Stomp","useEffect","useState","useWebSocket","isAuthenticated","stompClient","setStompClient","hasConnect","setHasConnect","handlers","connect","setTimeout","client","Client","brokerURL","frame","console","log","addHandler","handler","push","responseHandler","iMassage","forEach","subscribe","topic","sendMessage","to","message","JSON","stringify","send","disconnect"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;;AAEA,MAAMC,YAAY,GAAIC,eAAD,IAAqB;AAEtC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,KAAD,CAA5C;AACA,MAAIO,QAAQ,GAAG,EAAf;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIG,eAAJ,EAAqBM,OAAO;AAC/B,GAFQ,EAEN,CAACN,eAAD,CAFM,CAAT;AAIAH,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAII,WAAJ,EAAiB;AACbM,MAAAA,UAAU,CAAC,MAAMH,aAAa,CAAC,IAAD,CAApB,EAA4B,IAA5B,CAAV;AACH,KAFD,MAEO;AACHA,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH;AACJ,GANQ,EAMN,CAACH,WAAD,CANM,CAAT;;AAQA,QAAMK,OAAO,GAAG,MAAM;AAClB,UAAME,MAAM,GAAG,IAAIZ,KAAK,CAACa,MAAV,EAAf;AACAD,IAAAA,MAAM,CAACE,SAAP,GAAmB,sBAAnB;AACAF,IAAAA,MAAM,CAACF,OAAP,CAAe,OAAf,EAAwBK,KAAK,IAAIC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CAAjC;AACAT,IAAAA,cAAc,CAACM,MAAD,CAAd;AACH,GALD;;AAOA,QAAMM,UAAU,GAAGC,OAAO,IAAIV,QAAQ,CAACW,IAAT,CAAcD,OAAd,CAA9B;;AAEA,QAAME,eAAe,GAAIC,QAAD,IAAc;AAClCb,IAAAA,QAAQ,CAACc,OAAT,CAAiBJ,OAAO,IAAI;AACxBH,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBK,QAAzB,EAAmCH,OAAnC;AACAA,MAAAA,OAAO,CAACG,QAAD,CAAP;AACH,KAHD;AAIH,GALD;;AAOA,QAAME,SAAS,GAAIC,KAAD,IAAW;AACzB,QAAIlB,UAAJ,EAAgB;AACZ,aAAOF,WAAW,CAACmB,SAAZ,CAAsBC,KAAtB,EAA6BJ,eAA7B,CAAP;AACH;AACJ,GAJD;;AAMA,QAAMK,WAAW,GAAG,CAACC,EAAD,EAAKC,OAAO,GAAG,EAAf,KAAsB;AACtCA,IAAAA,OAAO,GAAG,OAAOA,OAAP,KAAmB,QAAnB,GAA8B,EAA9B,GAAmCC,IAAI,CAACC,SAAL,CAAeF,OAAf,CAA7C;AACAvB,IAAAA,WAAW,CAAC0B,IAAZ,CAAkB,OAAMJ,EAAG,EAA3B,EAA8B,EAA9B,EAAkCC,OAAlC;AACH,GAHD;;AAKA,QAAMI,UAAU,GAAG,MAAM;AACrB,QAAI3B,WAAW,KAAK,IAApB,EAA0B;AACtBA,MAAAA,WAAW,CAAC2B,UAAZ;AACAhB,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,KAHD,MAGO;AACHD,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACH;AACJ,GAPD;;AASA,SAAO;AAACP,IAAAA,OAAD;AAAUsB,IAAAA,UAAV;AAAsBR,IAAAA,SAAtB;AAAiCE,IAAAA,WAAjC;AAA8CR,IAAAA,UAA9C;AAA0DX,IAAAA;AAA1D,GAAP;AACH,CAvDD;;AAyDA,eAAeJ,YAAf","sourcesContent":["import Stomp from \"@stomp/stompjs\";\nimport {useEffect, useState} from \"react\";\n\nconst useWebSocket = (isAuthenticated) => {\n\n    const [stompClient, setStompClient] = useState(null)\n    const [hasConnect, setHasConnect] = useState(false)\n    let handlers = []\n\n    useEffect(() => {\n        if (isAuthenticated) connect()\n    }, [isAuthenticated])\n\n    useEffect(() => {\n        if (stompClient) {\n            setTimeout(() => setHasConnect(true), 1000)\n        } else {\n            setHasConnect(false)\n        }\n    }, [stompClient])\n\n    const connect = () => {\n        const client = new Stomp.Client()\n        client.brokerURL = \"wss://localhost:8080\"\n        client.connect('guest', frame => console.log(frame))\n        setStompClient(client)\n    }\n\n    const addHandler = handler => handlers.push(handler)\n\n    const responseHandler = (iMassage) => {\n        handlers.forEach(handler => {\n            console.log(\"HANDLER: \", iMassage, handler)\n            handler(iMassage)\n        })\n    }\n\n    const subscribe = (topic) => {\n        if (hasConnect) {\n            return stompClient.subscribe(topic, responseHandler);\n        }\n    }\n\n    const sendMessage = (to, message = \"\") => {\n        message = typeof message === \"string\" ? \"\" : JSON.stringify(message)\n        stompClient.send(`/app${to}`, {}, message)\n    }\n\n    const disconnect = () => {\n        if (stompClient !== null) {\n            stompClient.disconnect()\n            console.log(\"Disconnected\")\n        } else {\n            console.log(\"Stomp client dont exist!\")\n        }\n    }\n\n    return {connect, disconnect, subscribe, sendMessage, addHandler, hasConnect}\n}\n\nexport default useWebSocket"]},"metadata":{},"sourceType":"module"}