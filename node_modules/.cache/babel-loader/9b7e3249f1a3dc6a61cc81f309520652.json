{"ast":null,"code":"import React, { useEffect, useRef, useState } from \"react\";\nimport { Rnd } from \"react-rnd\";\nimport update from 'immutability-helper';\nconst style = {\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  border: \"solid 1px #ddd\",\n  background: \"#f0f0f0\"\n};\n\nconst Note = ({\n  key,\n  state,\n  setState\n}) => {\n  useEffect(() => {\n    console.log(key);\n  }, []); // const [transformNote, setTransformNote] = useState(false);\n  // const [text, setText] = useState('');\n  // const rnd = useRef();\n  //\n  //\n  // const savePositionWhenTransformation = () => {\n  //     console.log(\"change\", state.x !== 0)\n  //     if (state.x !== 0 || state.y !== 0) {\n  //         localStorage.setItem('position', JSON.stringify({x: state.x, y: state.y}))\n  //         console.log(\"position\")\n  //         setState(\n  //             [...state, {...state[key], x: 0, y: 0}]\n  //         )\n  //     } else if (state.x === 0 && state.y === 0) {\n  //         const stringPosition = localStorage.getItem('position');\n  //         if (stringPosition) {\n  //             const {x, y} = JSON.parse(stringPosition);\n  //             console.log(\"update \")\n  //             setState([...state, {\n  //                 ...state[key],\n  //                 x, y\n  //             }])\n  //         }\n  //     }\n  // };\n  //\n  // const getPositionIfRefreshPage = () => {\n  //     if (state.x === 0 && state.y === 0) {\n  //         const stringPosition = localStorage.getItem('position');\n  //         if (stringPosition) {\n  //             const {x, y} = JSON.parse(stringPosition);\n  //             // rnd.updatePosition({x,y})\n  //             setState([...state, {\n  //                 ...state[key],\n  //                 x, y\n  //             }])\n  //         }\n  //     }\n  // }\n  //\n  // useEffect(getPositionIfRefreshPage, [])\n  // useEffect(savePositionWhenTransformation, [transformNote])\n  //\n  //\n  // const onDragStopHandler = (event, data) => {\n  //     setState(...state.splice(key,1))\n  // }\n  //\n  // const onResizeStopHandler = (e, direction, ref, delta, position) => {\n  //     console.log(\"direction\", direction);\n  //     console.log(\"ref\", ref);\n  //     console.log('delta', delta)\n  //     console.log(\"position\", position);\n  //     setState([...state,{...state[key],\n  //         width: ref.style.width,\n  //         height: ref.style.height,\n  //         ...position\n  //     }]);\n  // }\n  //\n  // return (\n  //     <Rnd\n  //         ref={rnd}\n  //         className={`note${transformNote ? '-activate' : ''}`}\n  //         disableDragging={transformNote}\n  //         style={{...style}}\n  //         size={{width: state.width, height: state.height}}\n  //         minWidth={250}\n  //         minHeight={250}\n  //         position={{x: state.x, y: state.y}}\n  //         onDragStop={onDragStopHandler}\n  //         onResizeStop={onResizeStopHandler}\n  //         bounds={\"window\"}\n  //     >\n  //         <div className=\"note-header\">\n  //             <div className=\"color-buttons\">\n  //                 <button className=\"btn btn-success\"/>\n  //                 <button className=\"btn btn-danger\"/>\n  //                 <button className=\"btn btn-secondary\"/>\n  //             </div>\n  //             <div className=\"cross\">\n  //                 &times;\n  //             </div>\n  //         </div>\n  //         {\n  //             transformNote\n  //                 ?\n  //                 (\n  //                     <textarea\n  //                         className=\"note-text\"\n  //                         style={{resize: 'none', backgroundColor: \"grey\", width: '100%', height: \"100%\"}}\n  //                         value={text}\n  //                         onChange={(e) => setText(e.target.value)}\n  //                         onDoubleClick={() => setTransformNote(false)}\n  //                     >\n  //\n  //                         </textarea>\n  //                 )\n  //                 : (\n  //                     <div className=\"note-body\"\n  //                          style={{backgroundColor: 'grey'}}\n  //                          onDoubleClick={() => setTransformNote(true)}\n  //                     >\n  //                         {text}\n  //                     </div>\n  //                 )\n  //         }\n  //     </Rnd>\n  // )\n};\n\nexport default Note;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/i-note-common/src/components/Note.js"],"names":["React","useEffect","useRef","useState","Rnd","update","style","display","alignItems","justifyContent","border","background","Note","key","state","setState","console","log"],"mappings":"AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,EAAkCC,QAAlC,QAAiD,OAAjD;AACA,SAAQC,GAAR,QAAkB,WAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AAEA,MAAMC,KAAK,GAAG;AACVC,EAAAA,OAAO,EAAE,MADC;AAEVC,EAAAA,UAAU,EAAE,QAFF;AAGVC,EAAAA,cAAc,EAAE,QAHN;AAIVC,EAAAA,MAAM,EAAE,gBAJE;AAKVC,EAAAA,UAAU,EAAE;AALF,CAAd;;AAQA,MAAMC,IAAI,GAAG,CAAC;AAACC,EAAAA,GAAD;AAAKC,EAAAA,KAAL;AAAYC,EAAAA;AAAZ,CAAD,KAA2B;AAGpCd,EAAAA,SAAS,CAAC,MAAI;AACVe,IAAAA,OAAO,CAACC,GAAR,CAAYJ,GAAZ;AACH,GAFQ,EAEP,EAFO,CAAT,CAHoC,CAMpnHD;;AAqHA,eAAeD,IAAf","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\"\nimport {Rnd} from \"react-rnd\"\nimport update from 'immutability-helper'\n\nconst style = {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    border: \"solid 1px #ddd\",\n    background: \"#f0f0f0\",\n};\n\nconst Note = ({key,state, setState}) => {\n\n\n    useEffect(()=>{\n        console.log(key)\n    },[])\n    // const [transformNote, setTransformNote] = useState(false);\n    // const [text, setText] = useState('');\n    // const rnd = useRef();\n    //\n    //\n    // const savePositionWhenTransformation = () => {\n    //     console.log(\"change\", state.x !== 0)\n    //     if (state.x !== 0 || state.y !== 0) {\n    //         localStorage.setItem('position', JSON.stringify({x: state.x, y: state.y}))\n    //         console.log(\"position\")\n    //         setState(\n    //             [...state, {...state[key], x: 0, y: 0}]\n    //         )\n    //     } else if (state.x === 0 && state.y === 0) {\n    //         const stringPosition = localStorage.getItem('position');\n    //         if (stringPosition) {\n    //             const {x, y} = JSON.parse(stringPosition);\n    //             console.log(\"update \")\n    //             setState([...state, {\n    //                 ...state[key],\n    //                 x, y\n    //             }])\n    //         }\n    //     }\n    // };\n    //\n    // const getPositionIfRefreshPage = () => {\n    //     if (state.x === 0 && state.y === 0) {\n    //         const stringPosition = localStorage.getItem('position');\n    //         if (stringPosition) {\n    //             const {x, y} = JSON.parse(stringPosition);\n    //             // rnd.updatePosition({x,y})\n    //             setState([...state, {\n    //                 ...state[key],\n    //                 x, y\n    //             }])\n    //         }\n    //     }\n    // }\n    //\n    // useEffect(getPositionIfRefreshPage, [])\n    // useEffect(savePositionWhenTransformation, [transformNote])\n    //\n    //\n    // const onDragStopHandler = (event, data) => {\n    //     setState(...state.splice(key,1))\n    // }\n    //\n    // const onResizeStopHandler = (e, direction, ref, delta, position) => {\n    //     console.log(\"direction\", direction);\n    //     console.log(\"ref\", ref);\n    //     console.log('delta', delta)\n    //     console.log(\"position\", position);\n    //     setState([...state,{...state[key],\n    //         width: ref.style.width,\n    //         height: ref.style.height,\n    //         ...position\n    //     }]);\n    // }\n    //\n    // return (\n    //     <Rnd\n    //         ref={rnd}\n    //         className={`note${transformNote ? '-activate' : ''}`}\n    //         disableDragging={transformNote}\n    //         style={{...style}}\n    //         size={{width: state.width, height: state.height}}\n    //         minWidth={250}\n    //         minHeight={250}\n    //         position={{x: state.x, y: state.y}}\n    //         onDragStop={onDragStopHandler}\n    //         onResizeStop={onResizeStopHandler}\n    //         bounds={\"window\"}\n    //     >\n    //         <div className=\"note-header\">\n    //             <div className=\"color-buttons\">\n    //                 <button className=\"btn btn-success\"/>\n    //                 <button className=\"btn btn-danger\"/>\n    //                 <button className=\"btn btn-secondary\"/>\n    //             </div>\n    //             <div className=\"cross\">\n    //                 &times;\n    //             </div>\n    //         </div>\n    //         {\n    //             transformNote\n    //                 ?\n    //                 (\n    //                     <textarea\n    //                         className=\"note-text\"\n    //                         style={{resize: 'none', backgroundColor: \"grey\", width: '100%', height: \"100%\"}}\n    //                         value={text}\n    //                         onChange={(e) => setText(e.target.value)}\n    //                         onDoubleClick={() => setTransformNote(false)}\n    //                     >\n    //\n    //                         </textarea>\n    //                 )\n    //                 : (\n    //                     <div className=\"note-body\"\n    //                          style={{backgroundColor: 'grey'}}\n    //                          onDoubleClick={() => setTransformNote(true)}\n    //                     >\n    //                         {text}\n    //                     </div>\n    //                 )\n    //         }\n    //     </Rnd>\n    // )\n}\n\nexport default Note"]},"metadata":{},"sourceType":"module"}