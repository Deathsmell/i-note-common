{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport { TypeMessage } from \"./TypeMessage\";\n\nconst useWS = (notes, setNotes) => {\n  const [connection, setConnection] = useState(null);\n\n  function setArrayNotes(serverNote) {\n    console.log('set array notes');\n  }\n\n  const update = serverNote => {\n    setNotes(prev => [...prev.filter(note => note.id !== serverNote.id), serverNote]);\n  };\n\n  const updatePosition = ({\n    data\n  }) => {\n    if (data) {\n      const respNote = JSON.parse(data);\n\n      if (!respNote.type && Array.isArray(respNote)) {\n        setArrayNotes(respNote);\n      } else if (respNote.type === TypeMessage.UPDATE || respNote.type === TypeMessage.CREATE) {\n        update(respNote);\n      } else if (respNote.type === TypeMessage.DELETE) {\n        setNotes(notes.filter(note => note.id !== respNote.id));\n      } else if (respNote.type) {\n        console.error('Incorrect data message', data);\n      }\n    }\n  };\n\n  const test = data => {\n    console.log(data);\n  };\n\n  useEffect(() => {\n    if (connection === null) {\n      const url = window.location.href.replace(/^http/, 'ws').replace(/3000\\/$/, '5000/');\n      console.log(url);\n      const webSocket = new WebSocket(url);\n      webSocket.onmessage = updatePosition;\n      webSocket.onopen = test;\n      setConnection(webSocket);\n    }\n  }, [connection]);\n  return {\n    connection\n  };\n};\n\nexport default useWS;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/i-note-common/src/hooks/ws.hook.js"],"names":["useEffect","useState","TypeMessage","useWS","notes","setNotes","connection","setConnection","setArrayNotes","serverNote","console","log","update","prev","filter","note","id","updatePosition","data","respNote","JSON","parse","type","Array","isArray","UPDATE","CREATE","DELETE","error","test","url","window","location","href","replace","webSocket","WebSocket","onmessage","onopen"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,SAAQC,WAAR,QAA0B,eAA1B;;AAGA,MAAMC,KAAK,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAE/B,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,IAAD,CAA5C;;AAEA,WAASO,aAAT,CAAuBC,UAAvB,EAAmC;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAEH;;AAED,QAAMC,MAAM,GAAIH,UAAD,IAAgB;AAC3BJ,IAAAA,QAAQ,CAAEQ,IAAD,IAAU,CAAC,GAAGA,IAAI,CAACC,MAAL,CAAYC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYP,UAAU,CAACO,EAA3C,CAAJ,EAAoDP,UAApD,CAAX,CAAR;AACH,GAFD;;AAIA,QAAMQ,cAAc,GAAG,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAY;AAC/B,QAAIA,IAAJ,EAAU;AACN,YAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAjB;;AACA,UAAI,CAACC,QAAQ,CAACG,IAAV,IAAkBC,KAAK,CAACC,OAAN,CAAcL,QAAd,CAAtB,EAA+C;AAC3CX,QAAAA,aAAa,CAACW,QAAD,CAAb;AACH,OAFD,MAEO,IAAIA,QAAQ,CAACG,IAAT,KAAkBpB,WAAW,CAACuB,MAA9B,IAAwCN,QAAQ,CAACG,IAAT,KAAkBpB,WAAW,CAACwB,MAA1E,EAAkF;AACrFd,QAAAA,MAAM,CAACO,QAAD,CAAN;AACH,OAFM,MAEA,IAAIA,QAAQ,CAACG,IAAT,KAAkBpB,WAAW,CAACyB,MAAlC,EAA0C;AAC7CtB,QAAAA,QAAQ,CAACD,KAAK,CAACU,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,EAAL,KAAYG,QAAQ,CAACH,EAA1C,CAAD,CAAR;AACH,OAFM,MAEA,IAAIG,QAAQ,CAACG,IAAb,EAAmB;AACtBZ,QAAAA,OAAO,CAACkB,KAAR,CAAc,wBAAd,EAAwCV,IAAxC;AACH;AACJ;AACJ,GAbD;;AAeA,QAAMW,IAAI,GAAIX,IAAD,IAAU;AACnBR,IAAAA,OAAO,CAACC,GAAR,CAAYO,IAAZ;AACH,GAFD;;AAIAlB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIM,UAAU,KAAK,IAAnB,EAAyB;AACrB,YAAMwB,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CACPC,OADO,CACC,OADD,EACU,IADV,EAEPA,OAFO,CAEC,SAFD,EAEY,OAFZ,CAAZ;AAGAxB,MAAAA,OAAO,CAACC,GAAR,CAAYmB,GAAZ;AACA,YAAMK,SAAS,GAAG,IAAIC,SAAJ,CAAcN,GAAd,CAAlB;AACAK,MAAAA,SAAS,CAACE,SAAV,GAAsBpB,cAAtB;AACAkB,MAAAA,SAAS,CAACG,MAAV,GAAmBT,IAAnB;AACAtB,MAAAA,aAAa,CAAC4B,SAAD,CAAb;AACH;AACJ,GAXQ,EAWN,CAAC7B,UAAD,CAXM,CAAT;AAaA,SAAO;AAACA,IAAAA;AAAD,GAAP;AACH,CA9CD;;AAgDA,eAAeH,KAAf","sourcesContent":["import {useEffect, useState} from \"react\";\nimport {TypeMessage} from \"./TypeMessage\";\n\n\nconst useWS = (notes, setNotes) => {\n\n    const [connection, setConnection] = useState(null);\n\n    function setArrayNotes(serverNote) {\n        console.log('set array notes')\n\n    }\n\n    const update = (serverNote) => {\n        setNotes((prev) => [...prev.filter(note => note.id !== serverNote.id), serverNote])\n    }\n\n    const updatePosition = ({data}) => {\n        if (data) {\n            const respNote = JSON.parse(data);\n            if (!respNote.type && Array.isArray(respNote)) {\n                setArrayNotes(respNote);\n            } else if (respNote.type === TypeMessage.UPDATE || respNote.type === TypeMessage.CREATE) {\n                update(respNote);\n            } else if (respNote.type === TypeMessage.DELETE) {\n                setNotes(notes.filter(note => note.id !== respNote.id))\n            } else if (respNote.type) {\n                console.error('Incorrect data message', data)\n            }\n        }\n    }\n\n    const test = (data) => {\n        console.log(data)\n    }\n\n    useEffect(() => {\n        if (connection === null) {\n            const url = window.location.href\n                .replace(/^http/, 'ws')\n                .replace(/3000\\/$/, '5000/');\n            console.log(url)\n            const webSocket = new WebSocket(url)\n            webSocket.onmessage = updatePosition\n            webSocket.onopen = test\n            setConnection(webSocket)\n        }\n    }, [connection])\n\n    return {connection}\n}\n\nexport default useWS"]},"metadata":{},"sourceType":"module"}