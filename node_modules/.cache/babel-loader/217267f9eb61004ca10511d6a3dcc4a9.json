{"ast":null,"code":"// import {Client} from \"@stomp/stompjs\";\nimport WebSocket from 'ws';\nimport { useEffect, useState } from \"react\";\n\nconst useWebSocket = isAuthenticated => {\n  const [stompClient, setStompClient] = useState(null);\n  const [hasConnect, setHasConnect] = useState(false);\n  let handlers = [];\n  useEffect(() => {\n    if (isAuthenticated) connect();\n  }, [isAuthenticated]);\n  useEffect(() => {\n    if (stompClient) {\n      setTimeout(() => setHasConnect(true), 1000);\n    } else {\n      setHasConnect(false);\n    }\n  }, [stompClient]);\n\n  const connect = () => {\n    const connection = new WebSocket(\"ws://localhost:8080\");\n    console.log(\"connecting\");\n\n    connection.onopen = function () {\n      // connection is opened and ready to use\n      alert('connection Open');\n    };\n\n    connection.onerror = function (error) {\n      // an error occurred when sending/receiving data\n      alert('Error');\n    };\n\n    connection.onmessage = function (message) {\n      alert('Message');\n    };\n  };\n\n  const addHandler = handler => handlers.push(handler);\n\n  const responseHandler = iMassage => {\n    handlers.forEach(handler => {\n      console.log(\"HANDLER: \", iMassage, handler);\n      handler(iMassage);\n    });\n  };\n\n  const subscribe = topic => {\n    if (hasConnect) {\n      return stompClient.subscribe(topic, responseHandler);\n    }\n  };\n\n  const sendMessage = (to, message = \"\") => {\n    message = typeof message === \"string\" ? \"\" : JSON.stringify(message);\n    stompClient.send(`/app${to}`, {}, message);\n  };\n\n  const disconnect = () => {\n    if (stompClient !== null) {\n      stompClient.disconnect();\n      console.log(\"Disconnected\");\n    } else {\n      console.log(\"Stomp client dont exist!\");\n    }\n  };\n\n  return {\n    connect,\n    disconnect,\n    subscribe,\n    sendMessage,\n    addHandler,\n    hasConnect\n  };\n};\n\nexport default useWebSocket;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/i-note-common/src/hooks/ws.hooks.js"],"names":["WebSocket","useEffect","useState","useWebSocket","isAuthenticated","stompClient","setStompClient","hasConnect","setHasConnect","handlers","connect","setTimeout","connection","console","log","onopen","alert","onerror","error","onmessage","message","addHandler","handler","push","responseHandler","iMassage","forEach","subscribe","topic","sendMessage","to","JSON","stringify","send","disconnect"],"mappings":"AAAA;AACA,OAAOA,SAAP,MAAsB,IAAtB;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;;AAEA,MAAMC,YAAY,GAAIC,eAAD,IAAqB;AAEtC,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCJ,QAAQ,CAAC,IAAD,CAA9C;AACA,QAAM,CAACK,UAAD,EAAaC,aAAb,IAA8BN,QAAQ,CAAC,KAAD,CAA5C;AACA,MAAIO,QAAQ,GAAG,EAAf;AAEAR,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIG,eAAJ,EAAqBM,OAAO;AAC/B,GAFQ,EAEN,CAACN,eAAD,CAFM,CAAT;AAIAH,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAII,WAAJ,EAAiB;AACbM,MAAAA,UAAU,CAAC,MAAMH,aAAa,CAAC,IAAD,CAApB,EAA4B,IAA5B,CAAV;AACH,KAFD,MAEO;AACHA,MAAAA,aAAa,CAAC,KAAD,CAAb;AACH;AACJ,GANQ,EAMN,CAACH,WAAD,CANM,CAAT;;AAQA,QAAMK,OAAO,GAAG,MAAM;AAClB,UAAME,UAAU,GAAG,IAAIZ,SAAJ,CAAc,qBAAd,CAAnB;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;;AACAF,IAAAA,UAAU,CAACG,MAAX,GAAoB,YAAY;AAC5B;AACAC,MAAAA,KAAK,CAAC,iBAAD,CAAL;AACH,KAHD;;AAKAJ,IAAAA,UAAU,CAACK,OAAX,GAAqB,UAAUC,KAAV,EAAiB;AAClC;AACAF,MAAAA,KAAK,CAAC,OAAD,CAAL;AACH,KAHD;;AAKAJ,IAAAA,UAAU,CAACO,SAAX,GAAuB,UAAUC,OAAV,EAAmB;AACtCJ,MAAAA,KAAK,CAAC,SAAD,CAAL;AAEH,KAHD;AAIH,GAjBD;;AAmBA,QAAMK,UAAU,GAAGC,OAAO,IAAIb,QAAQ,CAACc,IAAT,CAAcD,OAAd,CAA9B;;AAEA,QAAME,eAAe,GAAIC,QAAD,IAAc;AAClChB,IAAAA,QAAQ,CAACiB,OAAT,CAAiBJ,OAAO,IAAI;AACxBT,MAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBW,QAAzB,EAAmCH,OAAnC;AACAA,MAAAA,OAAO,CAACG,QAAD,CAAP;AACH,KAHD;AAIH,GALD;;AAOA,QAAME,SAAS,GAAIC,KAAD,IAAW;AACzB,QAAIrB,UAAJ,EAAgB;AACZ,aAAOF,WAAW,CAACsB,SAAZ,CAAsBC,KAAtB,EAA6BJ,eAA7B,CAAP;AACH;AACJ,GAJD;;AAMA,QAAMK,WAAW,GAAG,CAACC,EAAD,EAAKV,OAAO,GAAG,EAAf,KAAsB;AACtCA,IAAAA,OAAO,GAAG,OAAOA,OAAP,KAAmB,QAAnB,GAA8B,EAA9B,GAAmCW,IAAI,CAACC,SAAL,CAAeZ,OAAf,CAA7C;AACAf,IAAAA,WAAW,CAAC4B,IAAZ,CAAkB,OAAMH,EAAG,EAA3B,EAA8B,EAA9B,EAAkCV,OAAlC;AACH,GAHD;;AAKA,QAAMc,UAAU,GAAG,MAAM;AACrB,QAAI7B,WAAW,KAAK,IAApB,EAA0B;AACtBA,MAAAA,WAAW,CAAC6B,UAAZ;AACArB,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH,KAHD,MAGO;AACHD,MAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACH;AACJ,GAPD;;AASA,SAAO;AAACJ,IAAAA,OAAD;AAAUwB,IAAAA,UAAV;AAAsBP,IAAAA,SAAtB;AAAiCE,IAAAA,WAAjC;AAA8CR,IAAAA,UAA9C;AAA0Dd,IAAAA;AAA1D,GAAP;AACH,CAnED;;AAqEA,eAAeJ,YAAf","sourcesContent":["// import {Client} from \"@stomp/stompjs\";\nimport WebSocket from 'ws'\nimport {useEffect, useState} from \"react\";\n\nconst useWebSocket = (isAuthenticated) => {\n\n    const [stompClient, setStompClient] = useState(null)\n    const [hasConnect, setHasConnect] = useState(false)\n    let handlers = []\n\n    useEffect(() => {\n        if (isAuthenticated) connect()\n    }, [isAuthenticated])\n\n    useEffect(() => {\n        if (stompClient) {\n            setTimeout(() => setHasConnect(true), 1000)\n        } else {\n            setHasConnect(false)\n        }\n    }, [stompClient])\n\n    const connect = () => {\n        const connection = new WebSocket(\"ws://localhost:8080\")\n        console.log(\"connecting\")\n        connection.onopen = function () {\n            // connection is opened and ready to use\n            alert('connection Open');\n        };\n\n        connection.onerror = function (error) {\n            // an error occurred when sending/receiving data\n            alert('Error');\n        };\n\n        connection.onmessage = function (message) {\n            alert('Message');\n\n        };\n    }\n\n    const addHandler = handler => handlers.push(handler)\n\n    const responseHandler = (iMassage) => {\n        handlers.forEach(handler => {\n            console.log(\"HANDLER: \", iMassage, handler)\n            handler(iMassage)\n        })\n    }\n\n    const subscribe = (topic) => {\n        if (hasConnect) {\n            return stompClient.subscribe(topic, responseHandler);\n        }\n    }\n\n    const sendMessage = (to, message = \"\") => {\n        message = typeof message === \"string\" ? \"\" : JSON.stringify(message)\n        stompClient.send(`/app${to}`, {}, message)\n    }\n\n    const disconnect = () => {\n        if (stompClient !== null) {\n            stompClient.disconnect()\n            console.log(\"Disconnected\")\n        } else {\n            console.log(\"Stomp client dont exist!\")\n        }\n    }\n\n    return {connect, disconnect, subscribe, sendMessage, addHandler, hasConnect}\n}\n\nexport default useWebSocket"]},"metadata":{},"sourceType":"module"}