{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport useLocal from \"./local.hook\";\nimport { TypeMessage } from \"./TypeMessage\";\n\nconst useWS = (notes, setNotes) => {\n  const [connection, setConnection] = useState(null); // const {saveInLocal, getFromLocal, removeInLocal} = useLocal();\n\n  function setArrayNotes(serverNote) {\n    console.log('set array notes'); // serverNote.forEach(note => {\n    //     saveInLocal(note.id, JSON.stringify(note))\n    // })\n\n    setNotes(() => serverNote);\n  }\n\n  const isEqual = (localNote, serverNote) => localNote.x === serverNote.x && localNote.y === serverNote.y && localNote.width === serverNote.width && localNote.height === serverNote.height;\n\n  const update = (serverNote, data) => {\n    // saveInLocal(serverNote.id, data)\n    // const fromLocal = getFromLocal(serverNote.id);\n    // const parse = JSON.parse(fromLocal);\n    // if (!isEqual(parse, serverNote)) {\n    if (notes.length !== 0) {\n      setNotes(prev => [...prev.filter(note => note.id !== serverNote.id), serverNote]);\n    } else {\n      setNotes(prev => [...prev.filter(note => note.id !== serverNote.id), serverNote]);\n    } // }\n\n  };\n\n  const updatePosition = ({\n    data\n  }) => {\n    if (data) {\n      const respNote = JSON.parse(data);\n\n      if (!respNote.type && Array.isArray(respNote)) {\n        console.log(\"initial\");\n        setArrayNotes(respNote);\n        return;\n      }\n\n      if (respNote.type === TypeMessage.UPDATE || respNote.type === TypeMessage.CREATE) {\n        update(respNote, data);\n      } else if (respNote.type === TypeMessage.DELETE) {\n        console.log('remove'); // removeInLocal(respNote.id)\n\n        setNotes(notes.filter(note => note.id !== respNote.id));\n      } else {\n        console.error('Incorrect data message', data);\n      }\n    }\n  };\n\n  const test = data => {\n    console.log(data);\n  };\n\n  useEffect(() => {\n    if (connection === null) {\n      const url = window.location.href.replace(/^http/, 'ws').replace(/3000\\/$/, '5000/');\n      console.log(url);\n      const webSocket = new WebSocket(url);\n      webSocket.onmessage = updatePosition;\n      webSocket.onopen = test;\n      setConnection(webSocket);\n    }\n  }, [connection]);\n  return {\n    connection\n  };\n};\n\nexport default useWS;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/i-note-common/src/hooks/ws.hook.js"],"names":["useEffect","useState","useLocal","TypeMessage","useWS","notes","setNotes","connection","setConnection","setArrayNotes","serverNote","console","log","isEqual","localNote","x","y","width","height","update","data","length","prev","filter","note","id","updatePosition","respNote","JSON","parse","type","Array","isArray","UPDATE","CREATE","DELETE","error","test","url","window","location","href","replace","webSocket","WebSocket","onmessage","onopen"],"mappings":"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","sourcesContent":["import {useEffect, useState} from \"react\";\nimport useLocal from \"./local.hook\";\nimport {TypeMessage} from \"./TypeMessage\";\n\n\nconst useWS = (notes, setNotes) => {\n\n    const [connection, setConnection] = useState(null);\n    // const {saveInLocal, getFromLocal, removeInLocal} = useLocal();\n\n    function setArrayNotes(serverNote) {\n        console.log('set array notes')\n        // serverNote.forEach(note => {\n        //     saveInLocal(note.id, JSON.stringify(note))\n        // })\n        setNotes(() => serverNote)\n    }\n\n    const isEqual = (localNote, serverNote) => localNote.x === serverNote.x\n        && localNote.y === serverNote.y\n        && localNote.width === serverNote.width\n        && localNote.height === serverNote.height\n\n\n    const update = (serverNote, data) => {\n        // saveInLocal(serverNote.id, data)\n        // const fromLocal = getFromLocal(serverNote.id);\n        // const parse = JSON.parse(fromLocal);\n        // if (!isEqual(parse, serverNote)) {\n            if (notes.length !== 0) {\n                setNotes((prev) => [...prev.filter(note => note.id !== serverNote.id), serverNote])\n            } else {\n                setNotes((prev) => [...prev.filter(note => note.id !== serverNote.id), serverNote])\n            }\n        // }\n    }\n\n    const updatePosition = ({data}) => {\n        if (data) {\n            const respNote = JSON.parse(data);\n            if (!respNote.type && Array.isArray(respNote)) {\n                console.log(\"initial\")\n                setArrayNotes(respNote);\n                return;\n            }\n            if (respNote.type === TypeMessage.UPDATE || respNote.type === TypeMessage.CREATE) {\n                update(respNote, data);\n            } else if (respNote.type === TypeMessage.DELETE) {\n                console.log('remove')\n                // removeInLocal(respNote.id)\n                setNotes(notes.filter(note => note.id !== respNote.id))\n            } else {\n                console.error('Incorrect data message', data)\n            }\n        }\n    }\n\n    const test = (data) => {\n        console.log(data)\n    }\n\n    useEffect(() => {\n        if (connection === null) {\n            const url = window.location.href\n                .replace(/^http/, 'ws')\n                .replace(/3000\\/$/, '5000/');\n            console.log(url)\n            const webSocket = new WebSocket(url)\n            webSocket.onmessage = updatePosition\n            webSocket.onopen = test\n            setConnection(webSocket)\n        }\n    }, [connection])\n\n    return {connection}\n}\n\nexport default useWS"]},"metadata":{},"sourceType":"module"}