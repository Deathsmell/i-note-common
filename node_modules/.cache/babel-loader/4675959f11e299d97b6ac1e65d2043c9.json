{"ast":null,"code":"var _jsxFileName = \"/home/deathsmell/WebstormProjects/i-note-common/src/App.js\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport Note from \"./components/Note\";\nimport useWS from \"./hooks/ws.hook\";\nimport useNote from \"./hooks/note.hook\";\nimport { TypeMessage } from \"./hooks/TypeMessage\";\nimport useLocal from \"./hooks/local.hook\";\n\nconst App = () => {\n  useEffect(function watchMounting() {\n    console.log(\"mounted App\");\n    return () => {\n      console.log(\"unmounted App\");\n    };\n  }, []);\n  const {\n    defaultNote,\n    updateNote\n  } = useNote();\n  const [notes, setNotes] = useState([]);\n  const {\n    saveInLocal,\n    getFromLocal,\n    removeInLocal\n  } = useLocal();\n  useEffect(function watchNotes() {\n    console.log(\"updated on mounted notes App\", notes);\n    return () => {\n      console.log(\"updated on unmounted notes App\", notes);\n    };\n  }, [notes]);\n\n  function setArrayNotes(serverNote) {\n    serverNote.forEach(note => {\n      saveInLocal(note.id, JSON.stringify(note));\n    });\n    setNotes(serverNote);\n  }\n\n  const compare = (localNote, serverNote) => localNote.x === serverNote.x && localNote.y === serverNote.y && localNote.width === serverNote.width && localNote.height === serverNote.height;\n\n  const update = useCallback((serverNote, data) => {\n    console.log('Update: old notes', notes, \"add\", serverNote);\n    saveInLocal(serverNote.id, data);\n    const index = notes.findIndex(note => note.id === serverNote.id);\n    const fromLocal = getFromLocal(serverNote.id);\n    const parse = JSON.parse(fromLocal); // if (!compare(parse, serverNote)) {\n\n    console.log(notes.length, serverNote);\n\n    if (~notes.length) {\n      notes[index] = serverNote;\n      setNotes([...notes]);\n    } else {\n      setNotes([serverNote]);\n    } // }\n\n  }, [notes]);\n\n  const updatePosition = ({\n    data\n  }) => {\n    if (data) {\n      const respNote = JSON.parse(data);\n      console.log('update positions: resp', data, 'old notes', notes);\n\n      if (!respNote.type && Array.isArray(respNote)) {\n        console.log(\"initial\");\n        setArrayNotes(respNote);\n        return;\n      }\n\n      if (respNote.type === TypeMessage.UPDATE) {\n        console.log(TypeMessage.UPDATE);\n        update(respNote, data);\n      } else if (respNote.type === TypeMessage.CREATE) {\n        console.log(TypeMessage.CREATE);\n        setNotes([...notes, respNote]);\n        update(respNote, data);\n      } else if (respNote.type === TypeMessage.DELETE) {\n        removeInLocal(respNote.id);\n        setNotes(notes.filter(note => note.id !== respNote.id));\n      } else {\n        console.error('Incorrect data message', data);\n      }\n    }\n  };\n\n  const {\n    connection\n  } = useWS(updatePosition); // useEffect(() => {\n  //     console.log(notes.length);\n  // }, [notes])\n\n  const createHandler = e => {\n    const newNote = updateNote(defaultNote, {\n      x: e.clientX,\n      y: e.clientY,\n      type: TypeMessage.CREATE\n    });\n    connection.send(JSON.stringify(newNote));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      backgroundColor: \"aqua\",\n      width: \"100vw\",\n      height: '100vh',\n      cursor: 'pointer'\n    },\n    onDoubleClick: createHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }, notes && notes.map((note, index) => {\n    return /*#__PURE__*/React.createElement(Note, {\n      key: index,\n      noteIndex: index,\n      note: note,\n      noteId: note.id,\n      notes: notes,\n      setNotes: setNotes,\n      serverText: note.text,\n      connection: connection,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 25\n      }\n    });\n  }));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/i-note-common/src/App.js"],"names":["React","useCallback","useEffect","useState","Note","useWS","useNote","TypeMessage","useLocal","App","watchMounting","console","log","defaultNote","updateNote","notes","setNotes","saveInLocal","getFromLocal","removeInLocal","watchNotes","setArrayNotes","serverNote","forEach","note","id","JSON","stringify","compare","localNote","x","y","width","height","update","data","index","findIndex","fromLocal","parse","length","updatePosition","respNote","type","Array","isArray","UPDATE","CREATE","DELETE","filter","error","connection","createHandler","e","newNote","clientX","clientY","send","backgroundColor","cursor","map","text"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useState} from \"react\"\nimport Note from \"./components/Note\";\nimport useWS from \"./hooks/ws.hook\";\nimport useNote from \"./hooks/note.hook\";\nimport {TypeMessage} from \"./hooks/TypeMessage\";\nimport useLocal from \"./hooks/local.hook\";\n\n\nconst App = () => {\n\n    useEffect(function watchMounting() {\n        console.log(\"mounted App\")\n        return () => {\n            console.log(\"unmounted App\")\n        }\n    }, [])\n\n    const {defaultNote, updateNote} = useNote();\n    const [notes, setNotes] = useState([]);\n    const {saveInLocal, getFromLocal, removeInLocal} = useLocal();\n\n    useEffect(function watchNotes() {\n        console.log(\"updated on mounted notes App\", notes)\n\n        return () => {\n            console.log(\"updated on unmounted notes App\", notes)\n        }\n    }, [notes])\n\n    function setArrayNotes(serverNote) {\n        serverNote.forEach(note => {\n            saveInLocal(note.id, JSON.stringify(note))\n        })\n        setNotes(serverNote)\n    }\n\n    const compare = (localNote, serverNote) => localNote.x === serverNote.x\n        && localNote.y === serverNote.y\n        && localNote.width === serverNote.width\n        && localNote.height === serverNote.height\n\n\n    const update = useCallback((serverNote, data) => {\n        console.log('Update: old notes', notes, \"add\", serverNote)\n        saveInLocal(serverNote.id, data)\n        const index = notes.findIndex(note => note.id === serverNote.id);\n        const fromLocal = getFromLocal(serverNote.id);\n        const parse = JSON.parse(fromLocal);\n        // if (!compare(parse, serverNote)) {\n        console.log(notes.length,serverNote)\n        if (~notes.length) {\n            notes[index] = serverNote\n            setNotes([...notes])\n        } else {\n            setNotes([serverNote])\n        }\n        // }\n    }, [notes])\n\n    const updatePosition = ({data}) => {\n        if (data) {\n            const respNote = JSON.parse(data);\n            console.log('update positions: resp', data, 'old notes', notes)\n            if (!respNote.type && Array.isArray(respNote)) {\n                console.log(\"initial\")\n                setArrayNotes(respNote);\n                return;\n            }\n            if (respNote.type === TypeMessage.UPDATE) {\n                console.log(TypeMessage.UPDATE)\n                update(respNote, data);\n            } else if (respNote.type === TypeMessage.CREATE) {\n                console.log(TypeMessage.CREATE)\n                setNotes([...notes, respNote])\n                update(respNote, data);\n            } else if (respNote.type === TypeMessage.DELETE) {\n                removeInLocal(respNote.id)\n                setNotes(notes.filter(note => note.id !== respNote.id))\n            } else {\n                console.error('Incorrect data message', data)\n            }\n        }\n    }\n\n    const {connection} = useWS(updatePosition);\n\n    // useEffect(() => {\n    //     console.log(notes.length);\n    // }, [notes])\n\n    const createHandler = (e) => {\n        const newNote = updateNote(defaultNote, {x: e.clientX, y: e.clientY, type: TypeMessage.CREATE});\n        connection.send(JSON.stringify(newNote))\n    }\n\n    return (\n        <div style={{backgroundColor: \"aqua\", width: \"100vw\", height: '100vh', cursor: 'pointer'}}\n             onDoubleClick={createHandler}\n        >\n            {notes &&\n            notes.map((note, index) => {\n                    return (\n                        <Note key={index}\n                              noteIndex={index}\n                              note={note}\n                              noteId={note.id}\n                              notes={notes}\n                              setNotes={setNotes}\n                              serverText={note.text}\n                              connection={connection}\n                        />\n                    )\n                }\n            )\n            }\n        </div>\n    )\n}\n\n\nexport default App"]},"metadata":{},"sourceType":"module"}