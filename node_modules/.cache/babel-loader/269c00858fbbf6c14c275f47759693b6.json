{"ast":null,"code":"var _jsxFileName = \"/home/deathsmell/WebstormProjects/i-note-common/src/Note.jsx\";\nimport React, { useState } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { ItemTypes } from \"./components/types\";\nimport update from 'immutability-helper';\nimport { Box } from \"./components/Box\";\nconst styles = {\n  width: \"100vw\",\n  height: \"100vh\",\n  border: '1px solid black',\n  position: 'relative'\n};\n\nconst Note = () => {\n  const [box, setBoxes] = useState({\n    a: {\n      top: 20,\n      left: 80,\n      title: 'Drag me around'\n    },\n    b: {\n      top: 180,\n      left: 20,\n      title: 'Drag me too'\n    }\n  });\n  const [, drop] = useDrop({\n    accept: ItemTypes.NOTE,\n\n    drop(item, monitor) {\n      const delta = monitor.getDifferenceFromInitialOffset();\n      const left = Math.round(item.left + delta.x);\n      const top = Math.round(item.top + delta.y);\n      moveBox(item.id, left, top);\n      return undefined;\n    }\n\n  });\n\n  const moveBox = (id, left, top) => {\n    setBoxes(update(box, {\n      [id]: {\n        $merge: {\n          left,\n          top\n        }\n      }\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: drop,\n    style: styles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, Object.keys(box).map(key => {\n    const {\n      left,\n      top,\n      title\n    } = box[key];\n    return /*#__PURE__*/React.createElement(Box, {\n      key: key,\n      id: key,\n      left: left,\n      top: top,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }\n    }, title);\n  }));\n};\n\nexport default Note;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/i-note-common/src/Note.jsx"],"names":["React","useState","useDrop","ItemTypes","update","Box","styles","width","height","border","position","Note","box","setBoxes","a","top","left","title","b","drop","accept","NOTE","item","monitor","delta","getDifferenceFromInitialOffset","Math","round","x","y","moveBox","id","undefined","$merge","Object","keys","map","key"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,SAAR,QAAwB,oBAAxB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,SAAQC,GAAR,QAAkB,kBAAlB;AAEA,MAAMC,MAAM,GAAG;AACXC,EAAAA,KAAK,EAAE,OADI;AAEXC,EAAAA,MAAM,EAAE,OAFG;AAGXC,EAAAA,MAAM,EAAE,iBAHG;AAIXC,EAAAA,QAAQ,EAAE;AAJC,CAAf;;AAOA,MAAMC,IAAI,GAAG,MAAM;AAEf,QAAM,CAACC,GAAD,EAAMC,QAAN,IAAkBZ,QAAQ,CAAC;AAC7Ba,IAAAA,CAAC,EAAE;AAACC,MAAAA,GAAG,EAAE,EAAN;AAAUC,MAAAA,IAAI,EAAE,EAAhB;AAAoBC,MAAAA,KAAK,EAAE;AAA3B,KAD0B;AAE7BC,IAAAA,CAAC,EAAE;AAACH,MAAAA,GAAG,EAAE,GAAN;AAAWC,MAAAA,IAAI,EAAE,EAAjB;AAAqBC,MAAAA,KAAK,EAAE;AAA5B;AAF0B,GAAD,CAAhC;AAKA,QAAM,GAAGE,IAAH,IAAWjB,OAAO,CAAC;AACrBkB,IAAAA,MAAM,EAAEjB,SAAS,CAACkB,IADG;;AAErBF,IAAAA,IAAI,CAACG,IAAD,EAAOC,OAAP,EAAgB;AAChB,YAAMC,KAAK,GAAGD,OAAO,CAACE,8BAAR,EAAd;AACA,YAAMT,IAAI,GAAGU,IAAI,CAACC,KAAL,CAAWL,IAAI,CAACN,IAAL,GAAYQ,KAAK,CAACI,CAA7B,CAAb;AACA,YAAMb,GAAG,GAAGW,IAAI,CAACC,KAAL,CAAWL,IAAI,CAACP,GAAL,GAAWS,KAAK,CAACK,CAA5B,CAAZ;AACAC,MAAAA,OAAO,CAACR,IAAI,CAACS,EAAN,EAAUf,IAAV,EAAgBD,GAAhB,CAAP;AACA,aAAOiB,SAAP;AACH;;AARoB,GAAD,CAAxB;;AAWA,QAAMF,OAAO,GAAG,CAACC,EAAD,EAAKf,IAAL,EAAWD,GAAX,KAAmB;AAC/BF,IAAAA,QAAQ,CAACT,MAAM,CAACQ,GAAD,EAAM;AACjB,OAACmB,EAAD,GAAM;AACFE,QAAAA,MAAM,EAAE;AAACjB,UAAAA,IAAD;AAAOD,UAAAA;AAAP;AADN;AADW,KAAN,CAAP,CAAR;AAKH,GAND;;AASA,sBAAQ;AAAK,IAAA,GAAG,EAAEI,IAAV;AAAgB,IAAA,KAAK,EAAEb,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACH4B,MAAM,CAACC,IAAP,CAAYvB,GAAZ,EAAiBwB,GAAjB,CAAsBC,GAAD,IAAS;AAC3B,UAAM;AAACrB,MAAAA,IAAD;AAAOD,MAAAA,GAAP;AAAYE,MAAAA;AAAZ,QAAqBL,GAAG,CAACyB,GAAD,CAA9B;AACA,wBACI,oBAAC,GAAD;AAAK,MAAA,GAAG,EAAEA,GAAV;AAAe,MAAA,EAAE,EAAEA,GAAnB;AAAwB,MAAA,IAAI,EAAErB,IAA9B;AAAoC,MAAA,GAAG,EAAED,GAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKE,KADL,CADJ;AAKH,GAPA,CADG,CAAR;AAUH,CArCD;;AAuCA,eAAeN,IAAf","sourcesContent":["import React, {useState} from \"react\"\nimport {useDrop} from \"react-dnd\";\nimport {ItemTypes} from \"./components/types\";\nimport update from 'immutability-helper';\nimport {Box} from \"./components/Box\";\n\nconst styles = {\n    width: \"100vw\",\n    height: \"100vh\",\n    border: '1px solid black',\n    position: 'relative',\n};\n\nconst Note = () => {\n\n    const [box, setBoxes] = useState({\n        a: {top: 20, left: 80, title: 'Drag me around'},\n        b: {top: 180, left: 20, title: 'Drag me too'},\n    });\n\n    const [, drop] = useDrop({\n        accept: ItemTypes.NOTE,\n        drop(item, monitor) {\n            const delta = monitor.getDifferenceFromInitialOffset();\n            const left = Math.round(item.left + delta.x);\n            const top = Math.round(item.top + delta.y);\n            moveBox(item.id, left, top);\n            return undefined;\n        },\n    });\n\n    const moveBox = (id, left, top) => {\n        setBoxes(update(box, {\n            [id]: {\n                $merge: {left, top},\n            },\n        }));\n    };\n\n\n    return (<div ref={drop} style={styles}>\n        {Object.keys(box).map((key) => {\n            const {left, top, title} = box[key];\n            return (\n                <Box key={key} id={key} left={left} top={top}>\n                    {title}\n                </Box>\n            )\n        })}\n    </div>);\n}\n\nexport default Note"]},"metadata":{},"sourceType":"module"}