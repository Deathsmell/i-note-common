{"ast":null,"code":"import { useCallback, useEffect, useState } from \"react\";\nimport { TypeMessage } from \"./TypeMessage\";\n\nconst useWS = (notes, setNotes) => {\n  const [connection, setConnection] = useState(null);\n  const update = useCallback(serverNote => {\n    setNotes(prev => [...prev.filter(note => note.id !== serverNote.id), serverNote]);\n  }, [setNotes]);\n  const reducers = {\n    [TypeMessage.CREATE]: update,\n    [TypeMessage.UPDATE]: update,\n    [TypeMessage.DELETE]: respNote => setNotes(notes.filter(note => note.id !== respNote.id))\n  };\n\n  const reducer = (note, action) => {\n    switch (action) {\n      case TypeMessage.CREATE:\n      case TypeMessage.UPDATE:\n        return update;\n\n      case TypeMessage.DELETE:\n        return respNote => setNotes(notes.filter(note => note.id !== respNote.id));\n\n      default:\n        if (Array.isArray(note)) {\n          setNotes(() => note);\n        } else {\n          console.error('Incorrect data message', data);\n        }\n\n    }\n  };\n\n  const noteReducer = (respNote, action) => {\n    if (Array.isArray(respNote)) {} else {\n      reducers[action](respNote);\n    }\n  };\n\n  const updatePosition = useCallback(({\n    data\n  }) => {\n    if (data) {\n      const respNote = JSON.parse(data);\n      noteReducer(respNote, respNote.type);\n    }\n  }, [notes, setNotes, update]);\n\n  const connected = () => {\n    console.log(\"connected\");\n  };\n\n  useEffect(() => {\n    if (connection === null) {\n      const url = window.location.href.replace(/^http/, 'ws').replace(/3000\\/$/, '5000/');\n      console.log(url);\n      const webSocket = new WebSocket(url);\n      webSocket.onmessage = updatePosition;\n      webSocket.onopen = connected;\n      setConnection(webSocket);\n    }\n  }, [connection, updatePosition]);\n  return {\n    connection\n  };\n};\n\nexport default useWS;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/i-note-common/src/hooks/ws.hook.js"],"names":["useCallback","useEffect","useState","TypeMessage","useWS","notes","setNotes","connection","setConnection","update","serverNote","prev","filter","note","id","reducers","CREATE","UPDATE","DELETE","respNote","reducer","action","Array","isArray","console","error","data","noteReducer","updatePosition","JSON","parse","type","connected","log","url","window","location","href","replace","webSocket","WebSocket","onmessage","onopen"],"mappings":"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","sourcesContent":["import {useCallback, useEffect, useState} from \"react\";\nimport {TypeMessage} from \"./TypeMessage\";\n\n\nconst useWS = (notes, setNotes) => {\n\n    const [connection, setConnection] = useState(null);\n\n    const update = useCallback((serverNote) => {\n        setNotes((prev) => [...prev.filter(note => note.id !== serverNote.id), serverNote])\n    }, [setNotes])\n\n    const reducers = {\n        [TypeMessage.CREATE]: update,\n        [TypeMessage.UPDATE]: update,\n        [TypeMessage.DELETE]: (respNote) => setNotes(notes.filter(note => note.id !== respNote.id)),\n    }\n\n    const reducer = (note,action) => {\n        switch (action) {\n            case TypeMessage.CREATE:\n            case TypeMessage.UPDATE:\n                return update\n            case TypeMessage.DELETE:\n                return (respNote) => setNotes(notes.filter(note => note.id !== respNote.id))\n            default:\n                if (Array.isArray(note)){\n                    setNotes(() => note)\n                } else {\n                    console.error('Incorrect data message', data)\n\n                }\n        }\n    }\n\n    const noteReducer = (respNote, action) => {\n        if (Array.isArray(respNote)) {\n\n        } else {\n            reducers[action](respNote)\n        }\n    }\n\n    const updatePosition = useCallback(({data}) => {\n        if (data) {\n            const respNote = JSON.parse(data);\n            noteReducer(respNote,respNote.type)\n        }\n    }, [notes, setNotes, update])\n\n    const connected = () => {\n        console.log(\"connected\")\n    }\n\n    useEffect(() => {\n        if (connection === null) {\n            const url = window.location.href\n                .replace(/^http/, 'ws')\n                .replace(/3000\\/$/, '5000/');\n            console.log(url)\n            const webSocket = new WebSocket(url)\n            webSocket.onmessage = updatePosition\n            webSocket.onopen = connected\n            setConnection(webSocket)\n        }\n    }, [connection, updatePosition])\n\n    return {connection}\n}\n\nexport default useWS"]},"metadata":{},"sourceType":"module"}