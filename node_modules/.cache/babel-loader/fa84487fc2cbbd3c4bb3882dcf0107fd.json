{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport useLocal from \"./local.hook\";\nimport { TypeMessage } from \"./TypeMessage\";\n\nconst useWS = ([notes, setNotes]) => {\n  const [connection, setConnection] = useState(null);\n  const {\n    saveInLocal,\n    getFromLocal,\n    removeInLocal\n  } = useLocal();\n\n  const compare = (localNote, serverNote) => localNote.x === serverNote.x && localNote.y === serverNote.y && localNote.width === serverNote.width && localNote.height === serverNote.height;\n\n  function setArrayNotes(serverNote) {\n    serverNote.forEach(note => {\n      saveInLocal(note.id, JSON.stringify(note));\n    });\n    setNotes(serverNote);\n  }\n\n  const updatePosition = ({\n    data\n  }) => {\n    if (data) {\n      const serverNote = JSON.parse(data);\n\n      if (!serverNote.type && serverNote) {\n        setArrayNotes(serverNote);\n        return;\n      }\n\n      if (serverNote.type === TypeMessage.UPDATE) {\n        saveInLocal(serverNote.id, data);\n        const index = notes.findIndex(note => note.id === serverNote.id);\n        const fromLocal = getFromLocal(serverNote.id);\n        const parse = JSON.parse(fromLocal);\n\n        if (!compare(parse, serverNote)) {\n          notes[index] = serverNote;\n          setNotes([...notes]);\n        }\n      } else if (serverNote.type === TypeMessage.CREATE) {\n        setNotes([...notes, serverNote]);\n      } else if (serverNote.type === TypeMessage.DELETE) {\n        removeInLocal(serverNote.id);\n        setNotes(notes.filter(note => note.id !== serverNote.id));\n      } else {\n        console.error('Incorrect data message', data);\n      }\n    }\n  }; // const getPositions = ({data}) => {\n  //     console.log(\"get positions\", data)\n  //     if (data) {\n  //         const serverNotes = JSON.parse(data);\n  //         setNotes(serverNotes)\n  //         serverNotes.forEach(note => {\n  //             saveInLocal(note.id, note)\n  //         })\n  //     }\n  // }\n\n\n  const test = data => {\n    console.log(data);\n  };\n\n  useEffect(() => {\n    if (connection === null) {\n      const webSocket = new WebSocket('ws://localhost:8080');\n      webSocket.onmessage = updatePosition;\n      webSocket.onopen = test;\n      setConnection(webSocket);\n    }\n  }, [connection]);\n  return {\n    connection\n  };\n};\n\nexport default useWS;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/i-note-common/src/hooks/ws.hook.js"],"names":["useEffect","useState","useLocal","TypeMessage","useWS","notes","setNotes","connection","setConnection","saveInLocal","getFromLocal","removeInLocal","compare","localNote","serverNote","x","y","width","height","setArrayNotes","forEach","note","id","JSON","stringify","updatePosition","data","parse","type","UPDATE","index","findIndex","fromLocal","CREATE","DELETE","filter","console","error","test","log","webSocket","WebSocket","onmessage","onopen"],"mappings":"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","sourcesContent":["import {useEffect, useState} from \"react\";\nimport useLocal from \"./local.hook\";\nimport {TypeMessage} from \"./TypeMessage\";\n\n\nconst useWS = ([notes, setNotes]) => {\n\n    const [connection, setConnection] = useState(null);\n    const {saveInLocal, getFromLocal, removeInLocal} = useLocal();\n\n    const compare = (localNote, serverNote) => localNote.x === serverNote.x\n        && localNote.y === serverNote.y\n        && localNote.width === serverNote.width\n        && localNote.height === serverNote.height\n\n\n    function setArrayNotes(serverNote) {\n        serverNote.forEach(note => {\n            saveInLocal(note.id, JSON.stringify(note))\n        })\n        setNotes(serverNote)\n    }\n\n    const updatePosition = ({data}) => {\n        if (data) {\n            const serverNote = JSON.parse(data);\n            if (!serverNote.type && serverNote) {\n                setArrayNotes(serverNote);\n                return;\n            }\n            if (serverNote.type === TypeMessage.UPDATE) {\n                saveInLocal(serverNote.id, data)\n                const index = notes.findIndex(note => note.id === serverNote.id);\n                const fromLocal = getFromLocal(serverNote.id);\n                const parse = JSON.parse(fromLocal);\n                if (!compare(parse, serverNote)) {\n                    notes[index] = serverNote\n                    setNotes([...notes])\n                }\n            } else if (serverNote.type === TypeMessage.CREATE) {\n                setNotes([...notes, serverNote])\n            } else if (serverNote.type === TypeMessage.DELETE) {\n                removeInLocal(serverNote.id)\n                setNotes(notes.filter(note => note.id !== serverNote.id))\n            } else {\n                console.error('Incorrect data message', data)\n            }\n        }\n    }\n\n    // const getPositions = ({data}) => {\n    //     console.log(\"get positions\", data)\n    //     if (data) {\n    //         const serverNotes = JSON.parse(data);\n    //         setNotes(serverNotes)\n    //         serverNotes.forEach(note => {\n    //             saveInLocal(note.id, note)\n    //         })\n    //     }\n    // }\n\n    const test = (data) => {\n        console.log(data)\n    }\n\n    useEffect(() => {\n        if (connection === null) {\n            const webSocket = new WebSocket('ws://localhost:8080');\n            webSocket.onmessage = updatePosition\n            webSocket.onopen = test\n            setConnection(webSocket)\n        }\n    }, [connection])\n\n    return {connection}\n}\n\nexport default useWS"]},"metadata":{},"sourceType":"module"}