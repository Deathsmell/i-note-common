{"ast":null,"code":"import { useEffect, useState } from \"react\";\nimport useLocal from \"./local.hook\";\nimport { TypeMessage } from \"./TypeMessage\";\nimport useNote from \"./note.hook\";\n\nconst useWS = () => {\n  const {\n    setNotes,\n    notes\n  } = useNote();\n  const [connection, setConnection] = useState(null);\n  const {\n    saveInLocal,\n    removeInLocal\n  } = useLocal();\n\n  const updatePosition = ({\n    data\n  }) => {\n    if (data) {\n      const serverNote = JSON.parse(data);\n      saveInLocal(serverNote.id, data);\n      const index = notes.findIndex(note => note.id === serverNote.id);\n\n      if (data.type === TypeMessage.UPDATE) {\n        setNotes(notes.splice(index, 1, serverNote));\n      } else if (data.type === TypeMessage.CREATE) {\n        setNotes([...notes, serverNote]);\n      } else if (data.type === TypeMessage.DELETE) {\n        removeInLocal(serverNote.id);\n        setNotes(notes.splice(index, 1));\n      } else {\n        console.error('Incorrect data message', data);\n      }\n    }\n  };\n\n  const getPositions = data => {\n    console.log(\"get positions\", data);\n\n    if (data) {\n      const serverNotes = JSON.parse(data);\n      setNotes(serverNotes);\n      serverNotes.forEach(note => {\n        saveInLocal(note.id, note);\n      });\n    }\n  };\n\n  const test = ({\n    data\n  }) => {\n    console.log(data);\n  };\n\n  useEffect(() => {\n    if (connection === null) {\n      const webSocket = new WebSocket('ws://localhost:8080'); // webSocket.onmessage = updatePosition\n      // webSocket.onopen = getPositions\n\n      webSocket.onopen = getPositions;\n      webSocket.onmessage = test;\n      setConnection(webSocket);\n    }\n  }, [connection]);\n  return {\n    connection\n  };\n};\n\nexport default useWS;","map":{"version":3,"sources":["/home/deathsmell/WebstormProjects/i-note-common/src/hooks/ws.hook.js"],"names":["useEffect","useState","useLocal","TypeMessage","useNote","useWS","setNotes","notes","connection","setConnection","saveInLocal","removeInLocal","updatePosition","data","serverNote","JSON","parse","id","index","findIndex","note","type","UPDATE","splice","CREATE","DELETE","console","error","getPositions","log","serverNotes","forEach","test","webSocket","WebSocket","onopen","onmessage"],"mappings":"AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,SAAQC,WAAR,QAA0B,eAA1B;AACA,OAAOC,OAAP,MAAoB,aAApB;;AAGA,MAAMC,KAAK,GAAG,MAAM;AAEhB,QAAM;AAACC,IAAAA,QAAD;AAAWC,IAAAA;AAAX,MAAoBH,OAAO,EAAjC;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM;AAACS,IAAAA,WAAD;AAAcC,IAAAA;AAAd,MAA+BT,QAAQ,EAA7C;;AAEA,QAAMU,cAAc,GAAG,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAY;AAC/B,QAAIA,IAAJ,EAAU;AACN,YAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAnB;AACAH,MAAAA,WAAW,CAACI,UAAU,CAACG,EAAZ,EAAgBJ,IAAhB,CAAX;AACA,YAAMK,KAAK,GAAGX,KAAK,CAACY,SAAN,CAAgBC,IAAI,IAAIA,IAAI,CAACH,EAAL,KAAYH,UAAU,CAACG,EAA/C,CAAd;;AACA,UAAIJ,IAAI,CAACQ,IAAL,KAAclB,WAAW,CAACmB,MAA9B,EAAsC;AAClChB,QAAAA,QAAQ,CAACC,KAAK,CAACgB,MAAN,CAAaL,KAAb,EAAoB,CAApB,EAAuBJ,UAAvB,CAAD,CAAR;AACH,OAFD,MAEO,IAAID,IAAI,CAACQ,IAAL,KAAclB,WAAW,CAACqB,MAA9B,EAAsC;AACzClB,QAAAA,QAAQ,CAAC,CAAC,GAAGC,KAAJ,EAAWO,UAAX,CAAD,CAAR;AACH,OAFM,MAEA,IAAID,IAAI,CAACQ,IAAL,KAAclB,WAAW,CAACsB,MAA9B,EAAsC;AACzCd,QAAAA,aAAa,CAACG,UAAU,CAACG,EAAZ,CAAb;AACAX,QAAAA,QAAQ,CAACC,KAAK,CAACgB,MAAN,CAAaL,KAAb,EAAoB,CAApB,CAAD,CAAR;AACH,OAHM,MAGA;AACHQ,QAAAA,OAAO,CAACC,KAAR,CAAc,wBAAd,EAAwCd,IAAxC;AACH;AACJ;AACJ,GAhBD;;AAkBA,QAAMe,YAAY,GAAIf,IAAD,IAAU;AAC3Ba,IAAAA,OAAO,CAACG,GAAR,CAAY,eAAZ,EAA4BhB,IAA5B;;AACA,QAAIA,IAAJ,EAAU;AACN,YAAMiB,WAAW,GAAGf,IAAI,CAACC,KAAL,CAAWH,IAAX,CAApB;AACAP,MAAAA,QAAQ,CAACwB,WAAD,CAAR;AACAA,MAAAA,WAAW,CAACC,OAAZ,CAAoBX,IAAI,IAAI;AACxBV,QAAAA,WAAW,CAACU,IAAI,CAACH,EAAN,EAAUG,IAAV,CAAX;AACH,OAFD;AAGH;AACJ,GATD;;AAWA,QAAMY,IAAI,GAAG,CAAC;AAACnB,IAAAA;AAAD,GAAD,KAAY;AACrBa,IAAAA,OAAO,CAACG,GAAR,CAAYhB,IAAZ;AACH,GAFD;;AAIAb,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIQ,UAAU,KAAK,IAAnB,EAAyB;AACrB,YAAMyB,SAAS,GAAG,IAAIC,SAAJ,CAAc,qBAAd,CAAlB,CADqB,CAErB;AACA;;AACAD,MAAAA,SAAS,CAACE,MAAV,GAAmBP,YAAnB;AACAK,MAAAA,SAAS,CAACG,SAAV,GAAsBJ,IAAtB;AACAvB,MAAAA,aAAa,CAACwB,SAAD,CAAb;AACH;AACJ,GATQ,EASN,CAACzB,UAAD,CATM,CAAT;AAWA,SAAO;AAACA,IAAAA;AAAD,GAAP;AACH,CAnDD;;AAqDA,eAAeH,KAAf","sourcesContent":["import {useEffect, useState} from \"react\";\nimport useLocal from \"./local.hook\";\nimport {TypeMessage} from \"./TypeMessage\";\nimport useNote from \"./note.hook\";\n\n\nconst useWS = () => {\n\n    const {setNotes, notes} = useNote();\n    const [connection, setConnection] = useState(null);\n    const {saveInLocal, removeInLocal} = useLocal();\n\n    const updatePosition = ({data}) => {\n        if (data) {\n            const serverNote = JSON.parse(data);\n            saveInLocal(serverNote.id, data)\n            const index = notes.findIndex(note => note.id === serverNote.id);\n            if (data.type === TypeMessage.UPDATE) {\n                setNotes(notes.splice(index, 1, serverNote))\n            } else if (data.type === TypeMessage.CREATE) {\n                setNotes([...notes, serverNote])\n            } else if (data.type === TypeMessage.DELETE) {\n                removeInLocal(serverNote.id)\n                setNotes(notes.splice(index, 1))\n            } else {\n                console.error('Incorrect data message', data)\n            }\n        }\n    }\n\n    const getPositions = (data) => {\n        console.log(\"get positions\",data)\n        if (data) {\n            const serverNotes = JSON.parse(data);\n            setNotes(serverNotes)\n            serverNotes.forEach(note => {\n                saveInLocal(note.id, note)\n            })\n        }\n    }\n\n    const test = ({data}) => {\n        console.log(data)\n    }\n\n    useEffect(() => {\n        if (connection === null) {\n            const webSocket = new WebSocket('ws://localhost:8080');\n            // webSocket.onmessage = updatePosition\n            // webSocket.onopen = getPositions\n            webSocket.onopen = getPositions\n            webSocket.onmessage = test\n            setConnection(webSocket)\n        }\n    }, [connection])\n\n    return {connection}\n}\n\nexport default useWS"]},"metadata":{},"sourceType":"module"}